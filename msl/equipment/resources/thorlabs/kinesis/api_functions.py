"""
C Functions defined in Thorlabs Kinesis v1.14.10
"""
from ctypes import c_char, c_byte, c_bool, c_short, c_ushort, c_int16, c_uint16, \
    c_int, c_uint, c_int32, c_int64, c_double, c_long, c_float, c_char_p, POINTER

from msl.equipment.resources.utils import BYTE, WORD, DWORD

from .callbacks import MotionControlCallback

from .structs import (
    BNT_IO_Settings,
    FF_IOSettings,
    KIM_DriveOPParameters,
    KIM_FeedbackSigParams,
    KIM_HomeParameters,
    KIM_JogParameters,
    KIM_LimitSwitchParameters,
    KIM_MMIChannelParameters,
    KIM_MMIParameters,
    KIM_TrigIOConfig,
    KIM_TrigParamsParameters,
    KLD_MMIParams,
    KLD_TrigIOParams,
    KLS_MMIParams,
    KLS_TrigIOParams,
    KMOT_MMIParams,
    KMOT_TriggerConfig,
    KMOT_TriggerParams,
    KNA_FeedbackLoopConstants,
    KNA_IOSettings,
    KNA_MMIParams,
    KNA_TIARangeParameters,
    KNA_TIAReading,
    KNA_TriggerConfig,
    KPZ_MMIParams,
    KPZ_TriggerConfig,
    KSC_MMIParams,
    KSC_TriggerConfig,
    KSG_MMIParams,
    KSG_TriggerConfig,
    MOT_BrushlessCurrentLoopParameters,
    MOT_BrushlessElectricOutputParameters,
    MOT_BrushlessPositionLoopParameters,
    MOT_BrushlessTrackSettleParameters,
    MOT_ButtonParameters,
    MOT_DC_PIDParameters,
    MOT_HomingParameters,
    MOT_JogParameters,
    MOT_JoystickParameters,
    MOT_LimitSwitchParameters,
    MOT_PIDLoopEncoderParams,
    MOT_PotentiometerSteps,
    MOT_PowerParameters,
    MOT_StageAxisParameters,
    MOT_VelocityParameters,
    MOT_VelocityProfileParameters,
    NT_CircleDiameterLUT,
    NT_CircleParameters,
    NT_HVComponent,
    NT_IOSettings,
    NT_LowPassFilterParameters,
    NT_TIARangeParameters,
    NT_TIAReading,
    PPC_IOSettings,
    PPC_NotchParams,
    PPC_PIDConsts,
    PZ_FeedbackLoopConstants,
    PZ_LUTWaveParameters,
    QD_KPA_DigitalIO,
    QD_KPA_TrigIOConfig,
    QD_LoopParameters,
    QD_LowPassFilterParameters,
    QD_NotchFilterParameters,
    QD_PIDParameters,
    QD_Position,
    QD_PositionDemandParameters,
    QD_Readings,
    SC_CycleParameters,
    TC_LoopParameters,
    TIM_ButtonParameters,
    TIM_DriveOPParameters,
    TIM_JogParameters,
    TLI_DeviceInfo,
    TLI_HardwareInformation,
    TPZ_IOSettings,
    TSG_IOSettings,
)

Benchtop_BrushlessMotor_FCNS = [
    ('BMC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_Close', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_IsChannelValid', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_MaxChannelCount', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_Identify', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(c_short), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('BMC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('BMC_GetNumChannels', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'settingsName')]),
    ('BMC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (MotionControlCallback, 'functionPointer')]),
    ('BMC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('BMC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('BMC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'velocity')]),
    ('BMC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('BMC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('BMC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'stepSize')]),
    ('BMC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('BMC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'jogDirection')]),
    ('BMC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('BMC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'index')]),
    ('BMC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'displacement')]),
    ('BMC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'direction')]),
    ('BMC_SetDirection', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'reverse')]),
    ('BMC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'distance')]),
    ('BMC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('BMC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('BMC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('BMC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('BMC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'position')]),
    ('BMC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'distance')]),
    ('BMC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('BMC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('BMC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('BMC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('BMC_RequestVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityProfileParameters), 'velocityProfileParams')]),
    ('BMC_SetVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityProfileParameters), 'velocityProfileParams')]),
    ('BMC_RequestStageAxisParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetStageAxisParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_StageAxisParameters), 'stageAxisParams')]),
    ('BMC_GetStageAxisParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'stageID'),
      (POINTER(WORD), 'axisID'),
      (c_char_p, 'partNumber'),
      (DWORD, 'size'),
      (POINTER(DWORD), 'serialNumber'),
      (POINTER(DWORD), 'countsPerUnit'),
      (POINTER(c_int), 'minPosition'),
      (POINTER(c_int), 'maxPosition'),
      (POINTER(c_int), 'maxAcceleration'),
      (POINTER(c_int), 'maxDecceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('BMC_GetSoftLimitMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'limitsSoftwareApproachPolicy')]),
    ('BMC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'travelMode')]),
    ('BMC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'countsPerUnit')]),
    ('BMC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_long), 'countsPerUnit')]),
    ('BMC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'countsPerUnit')]),
    ('BMC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'countsPerUnit')]),
    ('BMC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('BMC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('BMC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('BMC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('BMC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('BMC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('BMC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
    ('BMC_RequestJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('BMC_SetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('BMC_RequestPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessPositionLoopParameters), 'positionLoopParams')]),
    ('BMC_SetPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessPositionLoopParameters), 'positionLoopParams')]),
    ('BMC_RequestTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessTrackSettleParameters), 'settleParams')]),
    ('BMC_SetTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessTrackSettleParameters), 'settleParams')]),
    ('BMC_RequestCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_SetCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_RequestSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_SetSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_RequestElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessElectricOutputParameters), 'electricOutputParams')]),
    ('BMC_SetElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessElectricOutputParameters), 'electricOutputParams')]),
    ('BMC_RequestTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetTriggerSwitches', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'indicatorBits')]),
    ('BMC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'outputsBits')]),
    ('BMC_RequestRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetRackDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
    ('BMC_RequestRackStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetRackStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'milliseconds')]),
    ('BMC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('BMC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('BMC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BMC_ResetStageToDefaults', c_short, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
]

Benchtop_DCServo_FCNS = [
    ('BDC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BDC_Close', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BDC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BDC_IsChannelValid', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_MaxChannelCount', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BDC_Identify', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BDC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('BDC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('BDC_GetNumChannels', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BDC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BDC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'settingsName')]),
    ('BDC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetCalibrationFile', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'filename'),
      (c_bool, 'enabled')]),
    ('BDC_IsCalibrationActive', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetCalibrationFile', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'filename'),
      (c_short, 'sizeOfBuffer')]),
    ('BDC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'index')]),
    ('BDC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_ClearMessageQueue', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (MotionControlCallback, 'functionPointer')]),
    ('BDC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('BDC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('BDC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'velocity')]),
    ('BDC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'displacement')]),
    ('BDC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('BDC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('BDC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'stepSize')]),
    ('BDC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BDC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('BDC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'jogDirection')]),
    ('BDC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BDC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('BDC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'direction')]),
    ('BDC_SetDirection', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'reverse')]),
    ('BDC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'distance')]),
    ('BDC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('BDC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('BDC_RequestLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'clockwiseHardwareLimit'),
      (POINTER(WORD), 'anticlockwiseHardwareLimit'),
      (POINTER(c_uint), 'clockwisePosition'),
      (POINTER(c_uint), 'anticlockwisePosition'),
      (POINTER(WORD), 'softLimitMode')]),
    ('BDC_SetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (WORD, 'clockwiseHardwareLimit'),
      (WORD, 'anticlockwiseHardwareLimit'),
      (c_uint, 'clockwisePosition'),
      (c_uint, 'anticlockwisePosition'),
      (WORD, 'softLimitMode')]),
    ('BDC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('BDC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('BDC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('BDC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'position')]),
    ('BDC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'distance')]),
    ('BDC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('BDC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('BDC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('BDC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('BDC_GetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('BDC_SetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('BDC_RequestTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetTriggerSwitches', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'indicatorBits')]),
    ('BDC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'outputsBits')]),
    ('BDC_RequestRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BDC_GetRackDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BDC_SetRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
    ('BDC_RequestRackStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BDC_GetRackStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BDC_RequestInputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetInputVoltage', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_RequestDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_DC_PIDParameters), 'DCproportionalIntegralDifferentialParams'),
      (c_short, 'channel')]),
    ('BDC_SetDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_DC_PIDParameters), 'DCproportionalIntegralDifferentialParams'),
      (c_short, 'channel')]),
    ('BDC_GetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('BDC_SetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('BDC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'milliseconds')]),
    ('BDC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('BDC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('BDC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('BDC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'travelMode')]),
    ('BDC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('BDC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('BDC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('BDC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('BDC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('BDC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('BDC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('BDC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('BDC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('BDC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('BDC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('BDC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
]

Benchtop_NanoTrak_FCNS = [
    ('NT_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('NT_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('NT_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('NT_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestSignalState', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetSignalState', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetMode', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'mode')]),
    ('NT_RequestTrackingThresholdSignal', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTrackingThresholdSignal', c_float, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetTrackingThresholdSignal', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_float, 'threshold')]),
    ('NT_RequestCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_SetCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_HomeCircle', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestCirclePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCirclePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_RequestCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleParameters), 'params')]),
    ('NT_SetCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleParameters), 'params')]),
    ('NT_GetCircleDiameter', WORD, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_SetCircleDiameter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'diameter')]),
    ('NT_RequestCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleDiameterLUT), 'LUT')]),
    ('NT_SetCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleDiameterLUT), 'LUT')]),
    ('NT_RequestPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'params')]),
    ('NT_SetPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'params')]),
    ('NT_RequestTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIARangeParameters), 'params')]),
    ('NT_SetTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIARangeParameters), 'params')]),
    ('NT_GetRangeMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'mode'),
      (POINTER(WORD), 'oddOrEven')]),
    ('NT_SetRangeMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'mode'),
      (WORD, 'oddOrEven')]),
    ('NT_GetTIARange', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetTIARange', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'range')]),
    ('NT_RequestGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetGain', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'gain')]),
    ('NT_RequestTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_LowPassFilterParameters), 'params')]),
    ('NT_SetTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_LowPassFilterParameters), 'params')]),
    ('NT_RequestFeedbackSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetFeedbackSource', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetFeedbackSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'input')]),
    ('NT_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('NT_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('NT_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('NT_RequestReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIAReading), 'reading')]),
    ('NT_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('NT_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('NT_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('NT_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestChannelStates', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_ChannelEnable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (c_bool, 'enable')]),
    ('NT_IsChannelEnabled', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel')]),
    ('NT_RequestControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_SetControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (WORD, 'mode')]),
    ('NT_GetControlMode', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel')]),
    ('NT_SetNTChannels', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'chanA'),
      (c_short, 'chanB')]),
    ('NT_RequestNTChannels', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetNTChannels', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'chanA'),
      (POINTER(c_short), 'chanB')]),
    ('NT_RequestMaxTravel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetMaxTravel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'chanA'),
      (POINTER(c_double), 'chanB')]),
    ('NT_GetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(BNT_IO_Settings), 'IOsettings'),
      (WORD, 'channel')]),
    ('NT_SetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(BNT_IO_Settings), 'IOsettings'),
      (WORD, 'channel')]),
]

Benchtop_Piezo_FCNS = [
    ('PBC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PBC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PBC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PBC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PBC_MaxChannelCount', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PBC_IsChannelValid', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('PBC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('PBC_GetNumChannels', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PBC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PBC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PBC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'settingsName')]),
    ('PBC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (MotionControlCallback, 'functionPointer')]),
    ('PBC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_ClearMessageQueue', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PBC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PBC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'milliseconds')]),
    ('PBC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('PBC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('PBC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestActualPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestPosition', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_ResetParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetZero', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetPositionControlMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestPositionControlMode', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetPositionControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'mode')]),
    ('PBC_GetMaxOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestMaxOutputVoltage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetMaxOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'maxVoltage')]),
    ('PBC_GetOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestOutputVoltage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'volts')]),
    ('PBC_RequestVoltageSource', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetVoltageSource', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetVoltageSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'source')]),
    ('PBC_RequestMaximumTravel', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetMaximumTravel', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetPosition', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'position')]),
    ('PBC_RequestFeedbackLoopPIconsts', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_short), 'proportionalTerm'),
      (POINTER(c_short), 'integralTerm')]),
    ('PBC_SetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'proportionalTerm'),
      (c_short, 'integralTerm')]),
    ('PBC_GetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(PZ_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('PBC_SetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(PZ_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('PBC_SetLUTwaveParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(PZ_LUTWaveParameters), 'LUTwaveParams')]),
    ('PBC_SetLUTwaveSample', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'index'),
      (WORD, 'value')]),
    ('PBC_StartLUTwave', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_StopLUTwave', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PBC_GetRackDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PBC_SetRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
    ('PBC_RequestRackStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PBC_GetRackStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
]

Benchtop_PrecisionPiezo_FCNS = [
    ('PPC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('PPC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('PPC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PPC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('PPC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PPC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('PPC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_ClearMessageQueue', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PPC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PPC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('PPC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_ResetParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_SetZero', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_RequestActualPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PPC_RequestPosition', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetPositionControlMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_RequestPositionControlMode', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_SetPositionControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode')]),
    ('PPC_GetMinOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetMaxOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_RequestMaxOutputVoltage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PPC_SetMaxOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'maxVoltage')]),
    ('PPC_GetOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_RequestOutputVoltage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PPC_SetOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'volts')]),
    ('PPC_RequestVoltageSource', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetVoltageSource', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_SetVoltageSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'source')]),
    ('PPC_GetMaximumTravel', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetPosition', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PPC_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'position')]),
    ('PPC_GetIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PPC_IOSettings), 'ioSettings')]),
    ('PPC_SetIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PPC_IOSettings), 'ioSettings')]),
    ('PPC_GetNotchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PPC_NotchParams), 'notchParams')]),
    ('PPC_SetNotchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PPC_NotchParams), 'notchParams')]),
    ('PPC_RequestPIDConsts', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PPC_GetPIDConsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PPC_PIDConsts), 'pidConsts')]),
    ('PPC_SetPIDConsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PPC_PIDConsts), 'pidConsts')]),
    ('PPC2_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('PPC2_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('PPC2_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'settingsName')]),
    ('PPC2_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PPC2_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (MotionControlCallback, 'functionPointer')]),
    ('PPC2_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_ClearMessageQueue', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PPC2_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PPC2_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (c_int, 'milliseconds')]),
    ('PPC2_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_ResetParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_SetZero', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_RequestActualPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PPC2_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_GetPositionControlMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_SetPositionControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (c_short, 'mode')]),
    ('PPC2_GetMinOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_GetMaxOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_RequestMaxOutputVoltage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_SetMaxOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (c_short, 'maxVoltage')]),
    ('PPC2_GetOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_RequestOutputVoltage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_SetOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (c_short, 'volts')]),
    ('PPC2_RequestVoltageSource', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_GetVoltageSource', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_SetVoltageSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (c_short, 'source')]),
    ('PPC2_GetMaximumTravel', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_GetPosition', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (c_short, 'position')]),
    ('PPC2_GetIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(PPC_IOSettings), 'ioSettings')]),
    ('PPC2_SetIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(PPC_IOSettings), 'ioSettings')]),
    ('PPC2_GetNotchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(PPC_NotchParams), 'notchParams')]),
    ('PPC2_SetNotchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(PPC_NotchParams), 'notchParams')]),
    ('PPC2_RequestPIDConsts', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel')]),
    ('PPC2_GetPIDConsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(PPC_PIDConsts), 'pidConsts')]),
    ('PPC2_SetPIDConsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'channel'),
      (POINTER(PPC_PIDConsts), 'pidConsts')]),
]

Benchtop_StepperMotor_FCNS = [
    ('SBC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SBC_Close', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SBC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SBC_IsChannelValid', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_MaxChannelCount', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SBC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('SBC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('SBC_GetNumChannels', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SBC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SBC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'settingsName')]),
    ('SBC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetCalibrationFile', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'filename'),
      (c_bool, 'enabled')]),
    ('SBC_IsCalibrationActive', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetCalibrationFile', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'filename'),
      (c_short, 'sizeOfBuffer')]),
    ('SBC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'index')]),
    ('SBC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_ClearMessageQueue', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (MotionControlCallback, 'functionPointer')]),
    ('SBC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SBC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SBC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'velocity')]),
    ('SBC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'displacement')]),
    ('SBC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('SBC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('SBC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'stepSize')]),
    ('SBC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('SBC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('SBC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'jogDirection')]),
    ('SBC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('SBC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('SBC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'direction')]),
    ('SBC_SetDirection', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'reverse')]),
    ('SBC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'distance')]),
    ('SBC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('SBC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('SBC_RequestLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'clockwiseHardwareLimit'),
      (POINTER(WORD), 'anticlockwiseHardwareLimit'),
      (POINTER(c_uint), 'clockwisePosition'),
      (POINTER(c_uint), 'anticlockwisePosition'),
      (POINTER(WORD), 'softLimitMode')]),
    ('SBC_SetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (WORD, 'clockwiseHardwareLimit'),
      (WORD, 'anticlockwiseHardwareLimit'),
      (c_uint, 'clockwisePosition'),
      (c_uint, 'anticlockwisePosition'),
      (WORD, 'softLimitMode')]),
    ('SBC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('SBC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('SBC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('SBC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'position')]),
    ('SBC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'distance')]),
    ('SBC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('SBC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('SBC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('SBC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('SBC_GetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('SBC_SetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('SBC_RequestTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetTriggerSwitches', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'indicatorBits')]),
    ('SBC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'outputsBits')]),
    ('SBC_RequestRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SBC_GetRackDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SBC_SetRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
    ('SBC_RequestRackStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SBC_GetRackStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SBC_RequestInputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetInputVoltage', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('SBC_SetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('SBC_RequestBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetBowIndex', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'bowIndex')]),
    ('SBC_UsesPIDLoopEncoding', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetPIDLoopEncoderParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_PIDLoopEncoderParams), 'params')]),
    ('SBC_SetPIDLoopEncoderCoeff', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'coeff')]),
    ('SBC_RequestPIDLoopEncoderParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetPIDLoopEncoderParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_PIDLoopEncoderParams), 'params')]),
    ('SBC_GetPIDLoopEncoderCoeff', c_double, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('SBC_SetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('SBC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'milliseconds')]),
    ('SBC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('SBC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('SBC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('SBC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'travelMode')]),
    ('SBC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('SBC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('SBC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('SBC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('SBC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('SBC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('SBC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('SBC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('SBC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('SBC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('SBC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
]

FilterFlipper_FCNS = [
    ('FF_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('FF_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('FF_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('FF_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('FF_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('FF_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('FF_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('FF_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_GetIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(FF_IOSettings), 'settings')]),
    ('FF_RequestIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('FF_SetIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(FF_IOSettings), 'settings')]),
    ('FF_GetTransitTime', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_SetTransitTime', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'transitTime')]),
    ('FF_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('FF_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('FF_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('FF_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('FF_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('FF_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('FF_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('FF_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('FF_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
]

IntegratedStepperMotors_FCNS = [
    ('ISC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetLEDswitches', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'LEDswitches')]),
    ('ISC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('ISC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('ISC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetCalibrationFile', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'filename'),
      (c_bool, 'enabled')]),
    ('ISC_IsCalibrationActive', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetCalibrationFile', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'filename'),
      (c_short, 'sizeOfBuffer')]),
    ('ISC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('ISC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('ISC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('ISC_ResetStageToDefaults', c_short, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('ISC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'index')]),
    ('ISC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('ISC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('ISC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('ISC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'velocity')]),
    ('ISC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'displacement')]),
    ('ISC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('ISC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('ISC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'stepSize')]),
    ('ISC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('ISC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('ISC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'jogDirection')]),
    ('ISC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('ISC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('ISC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'direction')]),
    ('ISC_SetDirection', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'reverse')]),
    ('ISC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'distance')]),
    ('ISC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('ISC_RequestLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'clockwiseHardwareLimit'),
      (POINTER(WORD), 'anticlockwiseHardwareLimit'),
      (POINTER(c_uint), 'clockwisePosition'),
      (POINTER(c_uint), 'anticlockwisePosition'),
      (POINTER(WORD), 'softLimitMode')]),
    ('ISC_SetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'clockwiseHardwareLimit'),
      (WORD, 'anticlockwiseHardwareLimit'),
      (c_uint, 'clockwisePosition'),
      (c_uint, 'anticlockwisePosition'),
      (WORD, 'softLimitMode')]),
    ('ISC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('ISC_RequestButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'buttonMode'),
      (POINTER(c_int), 'leftButtonPosition'),
      (POINTER(c_int), 'rightButtonPosition'),
      (POINTER(c_short), 'timeout')]),
    ('ISC_SetButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'buttonMode'),
      (c_int, 'leftButtonPosition'),
      (c_int, 'rightButtonPosition')]),
    ('ISC_RequestPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'index'),
      (POINTER(WORD), 'thresholdDeflection'),
      (POINTER(DWORD), 'velocity')]),
    ('ISC_SetPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'index'),
      (WORD, 'thresholdDeflection'),
      (DWORD, 'velocity')]),
    ('ISC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('ISC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('ISC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('ISC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'distance')]),
    ('ISC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('ISC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('ISC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('ISC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('ISC_GetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('ISC_SetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('ISC_GetButtonParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_ButtonParameters), 'buttonParams')]),
    ('ISC_SetButtonParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_ButtonParameters), 'buttonParams')]),
    ('ISC_GetPotentiometerParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PotentiometerSteps), 'potentiometerSteps')]),
    ('ISC_SetPotentiometerParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PotentiometerSteps), 'potentiometerSteps')]),
    ('ISC_RequestPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('ISC_SetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('ISC_RequestBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetBowIndex', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'bowIndex')]),
    ('ISC_RequestTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetTriggerSwitches', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'indicatorBits')]),
    ('ISC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('ISC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('ISC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('ISC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('ISC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'travelMode')]),
    ('ISC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('ISC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('ISC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('ISC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('ISC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('ISC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('ISC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('ISC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('ISC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('ISC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('ISC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('ISC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
]

KCube_BrushlessMotor_FCNS = [
    ('BMC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_Close', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(c_short), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('BMC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('BMC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('BMC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('BMC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('BMC_ResetStageToDefaults', c_short, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('BMC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('BMC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'index')]),
    ('BMC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('BMC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('BMC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('BMC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'velocity')]),
    ('BMC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'displacement')]),
    ('BMC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('BMC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('BMC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'stepSize')]),
    ('BMC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('BMC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'jogDirection')]),
    ('BMC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('BMC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'direction')]),
    ('BMC_SetDirection', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'reverse')]),
    ('BMC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'distance')]),
    ('BMC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('BMC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('BMC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('BMC_RequestMMIparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelMode'),
      (POINTER(c_int32), 'wheelMaxVelocity'),
      (POINTER(c_int32), 'wheelAcceleration'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetPosition1'),
      (POINTER(c_int32), 'presetPosition2'),
      (POINTER(c_int16), 'displayIntensity'),
      (POINTER(c_int16), 'displayTimeout'),
      (POINTER(c_int16), 'displayDimIntensity')]),
    ('BMC_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelMode'),
      (POINTER(c_int32), 'wheelMaxVelocity'),
      (POINTER(c_int32), 'wheelAcceleration'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetPosition1'),
      (POINTER(c_int32), 'presetPosition2'),
      (POINTER(c_int16), 'displayIntensity')]),
    ('BMC_SetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelMode'),
      (c_int32, 'wheelMaxVelocity'),
      (c_int32, 'wheelAcceleration'),
      (c_int16, 'directionSense'),
      (c_int32, 'presetPosition1'),
      (c_int32, 'presetPosition2'),
      (c_int16, 'displayIntensity'),
      (c_int16, 'displayTimeout'),
      (c_int16, 'displayDimIntensity')]),
    ('BMC_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelMode'),
      (c_int32, 'wheelMaxVelocity'),
      (c_int32, 'wheelAcceleration'),
      (c_int16, 'directionSense'),
      (c_int32, 'presetPosition1'),
      (c_int32, 'presetPosition2'),
      (c_int16, 'displayIntensity')]),
    ('BMC_RequestTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestPosTriggerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('BMC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('BMC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('BMC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'distance')]),
    ('BMC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('BMC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('BMC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('BMC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('BMC_RequestVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityProfileParameters), 'velocityProfileParams')]),
    ('BMC_SetVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityProfileParameters), 'velocityProfileParams')]),
    ('BMC_RequestStageAxisParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetStageAxisParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_StageAxisParameters), 'stageAxisParams')]),
    ('BMC_GetStageAxisParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'stageID'),
      (POINTER(WORD), 'axisID'),
      (c_char_p, 'partNumber'),
      (DWORD, 'size'),
      (POINTER(DWORD), 'serialNumber'),
      (POINTER(DWORD), 'countsPerUnit'),
      (POINTER(c_int), 'minPosition'),
      (POINTER(c_int), 'maxPosition'),
      (POINTER(c_int), 'maxAcceleration'),
      (POINTER(c_int), 'maxDecceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('BMC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'travelMode')]),
    ('BMC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'countsPerUnit')]),
    ('BMC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_long), 'countsPerUnit')]),
    ('BMC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'countsPerUnit')]),
    ('BMC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'countsPerUnit')]),
    ('BMC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('BMC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('BMC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('BMC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('BMC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('BMC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('BMC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
    ('BMC_RequestPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessPositionLoopParameters), 'positionLoopParams')]),
    ('BMC_SetPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessPositionLoopParameters), 'positionLoopParams')]),
    ('BMC_RequestTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessTrackSettleParameters), 'settleParams')]),
    ('BMC_SetTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessTrackSettleParameters), 'settleParams')]),
    ('BMC_RequestCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_SetCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_RequestElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessElectricOutputParameters), 'electricOutputParams')]),
    ('BMC_SetElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessElectricOutputParameters), 'electricOutputParams')]),
    ('BMC_RequestTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetTriggerSwitches', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'indicatorBits')]),
    ('BMC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('BMC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('BMC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('BMC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
]

KCube_DCServo_FCNS = [
    ('CC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetLEDswitches', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'LEDswitches')]),
    ('CC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('CC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('CC_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('CC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('CC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('CC_ResetStageToDefaults', c_short, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('CC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('CC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'index')]),
    ('CC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('CC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('CC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('CC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'velocity')]),
    ('CC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'displacement')]),
    ('CC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('CC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('CC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'stepSize')]),
    ('CC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('CC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('CC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'jogDirection')]),
    ('CC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('CC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('CC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'direction')]),
    ('CC_SetDirection', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'reverse')]),
    ('CC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'distance')]),
    ('CC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('CC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('CC_RequestLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'clockwiseHardwareLimit'),
      (POINTER(WORD), 'anticlockwiseHardwareLimit'),
      (POINTER(c_uint), 'clockwisePosition'),
      (POINTER(c_uint), 'anticlockwisePosition'),
      (POINTER(WORD), 'softLimitMode')]),
    ('CC_SetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'clockwiseHardwareLimit'),
      (WORD, 'anticlockwiseHardwareLimit'),
      (c_uint, 'clockwisePosition'),
      (c_uint, 'anticlockwisePosition'),
      (WORD, 'softLimitMode')]),
    ('CC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('CC_RequestMMIparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelMode'),
      (POINTER(c_int32), 'wheelMaxVelocity'),
      (POINTER(c_int32), 'wheelAcceleration'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetPosition1'),
      (POINTER(c_int32), 'presetPosition2'),
      (POINTER(c_int16), 'displayIntensity'),
      (POINTER(c_int16), 'displayTimeout'),
      (POINTER(c_int16), 'displayDimIntensity')]),
    ('CC_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelMode'),
      (POINTER(c_int32), 'wheelMaxVelocity'),
      (POINTER(c_int32), 'wheelAcceleration'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetPosition1'),
      (POINTER(c_int32), 'presetPosition2'),
      (POINTER(c_int16), 'displayIntensity')]),
    ('CC_SetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelMode'),
      (c_int32, 'wheelMaxVelocity'),
      (c_int32, 'wheelAcceleration'),
      (c_int16, 'directionSense'),
      (c_int32, 'presetPosition1'),
      (c_int32, 'presetPosition2'),
      (c_int16, 'displayIntensity'),
      (c_int16, 'displayTimeout'),
      (c_int16, 'displayDimIntensity')]),
    ('CC_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelMode'),
      (c_int32, 'wheelMaxVelocity'),
      (c_int32, 'wheelAcceleration'),
      (c_int16, 'directionSense'),
      (c_int32, 'presetPosition1'),
      (c_int32, 'presetPosition2'),
      (c_int16, 'displayIntensity')]),
    ('CC_RequestTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'trigger1Mode'),
      (POINTER(c_int16), 'trigger1Polarity'),
      (POINTER(c_int16), 'trigger2Mode'),
      (POINTER(c_int16), 'trigger2Polarity')]),
    ('CC_SetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'trigger1Mode'),
      (c_int16, 'trigger1Polarity'),
      (c_int16, 'trigger2Mode'),
      (c_int16, 'trigger2Polarity')]),
    ('CC_RequestPosTriggerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetTriggerParamsParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int32), 'triggerStartPositionFwd'),
      (POINTER(c_int32), 'triggerIntervalFwd'),
      (POINTER(c_int32), 'triggerPulseCountFwd'),
      (POINTER(c_int32), 'triggerStartPositionRev'),
      (POINTER(c_int32), 'triggerIntervalRev'),
      (POINTER(c_int32), 'triggerPulseCountRev'),
      (POINTER(c_int32), 'triggerPulseWidth'),
      (POINTER(c_int32), 'cycleCount')]),
    ('CC_SetTriggerParamsParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int32, 'triggerStartPositionFwd'),
      (c_int32, 'triggerIntervalFwd'),
      (c_int32, 'triggerPulseCountFwd'),
      (c_int32, 'triggerStartPositionRev'),
      (c_int32, 'triggerIntervalRev'),
      (c_int32, 'triggerPulseCountRev'),
      (c_int32, 'triggerPulseWidth'),
      (c_int32, 'cycleCount')]),
    ('CC_GetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_MMIParams), 'mmiParams')]),
    ('CC_SetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_MMIParams), 'mmiParams')]),
    ('CC_GetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerConfig), 'triggerConfigParams')]),
    ('CC_SetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerConfig), 'triggerConfigParams')]),
    ('CC_GetTriggerParamsParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerParams), 'triggerParamsParams')]),
    ('CC_SetTriggerParamsParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerParams), 'triggerParamsParams')]),
    ('CC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('CC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('CC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('CC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'distance')]),
    ('CC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('CC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('CC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('CC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('CC_GetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('CC_SetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('CC_RequestDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_DC_PIDParameters), 'DCproportionalIntegralDifferentialParams')]),
    ('CC_SetDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_DC_PIDParameters), 'DCproportionalIntegralDifferentialParams')]),
    ('CC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('CC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('CC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('CC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('CC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'travelMode')]),
    ('CC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('CC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('CC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('CC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('CC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('CC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('CC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('CC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('CC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('CC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('CC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
    ('CC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
]

KCube_InertialMotor_FCNS = [
    ('KIM_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('KIM_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('KIM_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('KIM_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('KIM_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('KIM_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('KIM_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('KIM_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('KIM_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('KIM_Reset', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('KIM_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('KIM_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('KIM_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('KIM_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('KIM_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_ZeroPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_long, 'position')]),
    ('KIM_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_int32, 'position')]),
    ('KIM_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_int32, 'stepSize')]),
    ('KIM_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_byte, 'jogDirection')]),
    ('KIM_MoveStop', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_RequestDriveOPParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_SetDriveOPParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_int16, 'maxVoltage'),
      (c_int32, 'stepRate'),
      (c_int32, 'stepAcceleration')]),
    ('KIM_GetDriveOPParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int16), 'maxVoltage'),
      (POINTER(c_int32), 'stepRate'),
      (POINTER(c_int32), 'stepAcceleration')]),
    ('KIM_SetDriveOPParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_DriveOPParameters), 'driveOPParameters')]),
    ('KIM_GetDriveOPParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_DriveOPParameters), 'driveOPParameters')]),
    ('KIM_RequestJogParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_SetJogParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_uint16, 'jogMode'),
      (c_int32, 'jogStepSizeFwd'),
      (c_int32, 'jogStepSizeRev'),
      (c_int32, 'jogStepRate'),
      (c_int32, 'jogStepAcceleration')]),
    ('KIM_GetJogParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_uint16), 'jogMode'),
      (POINTER(c_int32), 'jogStepSizeFwd'),
      (POINTER(c_int32), 'jogStepSizeRev'),
      (POINTER(c_int32), 'jogStepRate'),
      (POINTER(c_int32), 'jogStepAcceleration')]),
    ('KIM_SetJogParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_JogParameters), 'jogParameters')]),
    ('KIM_GetJogParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_JogParameters), 'jogParameters')]),
    ('KIM_GetLimitSwitchParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int16), 'forwardLimit'),
      (POINTER(c_int16), 'reverseLimit'),
      (POINTER(c_int16), 'stageID')]),
    ('KIM_SetLimitSwitchParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_int16, 'forwardLimit'),
      (c_int16, 'reverseLimit'),
      (c_int16, 'stageID')]),
    ('KIM_GetLimitSwitchParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_LimitSwitchParameters), 'limitSwitchParameters')]),
    ('KIM_SetLimitSwitchParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_LimitSwitchParameters), 'limitSwitchParameters')]),
    ('KIM_RequestLimitSwitchParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_GetHomeParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_byte), 'homeDirection'),
      (POINTER(c_byte), 'homeLimitSwitch'),
      (POINTER(c_int32), 'homeStepRate'),
      (POINTER(c_int32), 'homeOffset')]),
    ('KIM_SetHomeParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_byte, 'homeDirection'),
      (c_byte, 'homeLimitSwitch'),
      (c_int32, 'homeStepRate'),
      (c_int32, 'homeOffset')]),
    ('KIM_GetHomeParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_HomeParameters), 'homeParameters')]),
    ('KIM_SetHomeParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_HomeParameters), 'homeParameters')]),
    ('KIM_RequestHomeParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_GetMMIDeviceParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int16), 'joystickMode'),
      (POINTER(c_int32), 'maxStepRate'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetPos1'),
      (POINTER(c_int32), 'presetPos2'),
      (POINTER(c_int32), 'displayIntensity')]),
    ('KIM_GetMMIChannelParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int32), 'presetPos1'),
      (POINTER(c_int32), 'presetPos2')]),
    ('KIM_SetMMIDeviceParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'joystickMode'),
      (c_int32, 'maxStepRate'),
      (c_int16, 'directionSense'),
      (c_int16, 'displayIntensity')]),
    ('KIM_SetMMIChannelParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_int32, 'presetPos1'),
      (c_int32, 'presetPos2')]),
    ('KIM_GetMMIDeviceParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KIM_MMIParameters), 'mmiParameters')]),
    ('KIM_GetMMIChannelParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_MMIChannelParameters), 'mmiParameters')]),
    ('KIM_SetMMIDeviceParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KIM_MMIParameters), 'mmiParameters')]),
    ('KIM_SetMMIChannelParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_MMIChannelParameters), 'mmiParameters')]),
    ('KIM_RequestMMIParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_GetTrigIOParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'trig1Mode'),
      (POINTER(c_int16), 'trig1Polarity'),
      (POINTER(c_uint16), 'trigChannel1'),
      (POINTER(c_int16), 'trig2Mode'),
      (POINTER(c_int16), 'trig2Polarity'),
      (POINTER(c_uint16), 'trigChannel2')]),
    ('KIM_SetTrigIOParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'trig1Mode'),
      (c_int16, 'trig1Polarity'),
      (c_uint16, 'trigChannel1'),
      (c_int16, 'trig2Mode'),
      (c_int16, 'trig2Polarity'),
      (c_uint16, 'trigChannel2')]),
    ('KIM_GetTrigIOParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KIM_TrigIOConfig), 'trigIOParameters')]),
    ('KIM_SetTrigIOParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KIM_TrigIOConfig), 'trigIOParameters')]),
    ('KIM_RequestTrigIOParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('KIM_GetTrigParamsParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int32), 'startPosFwd'),
      (POINTER(c_int32), 'intervalFwd'),
      (POINTER(c_int32), 'numberOfPulsesFwd'),
      (POINTER(c_int32), 'startPosRev'),
      (POINTER(c_int32), 'intervalRev'),
      (POINTER(c_int32), 'numberOfPulsesRev'),
      (POINTER(c_int32), 'pulseWidth'),
      (POINTER(c_int32), 'numberOfCycles')]),
    ('KIM_SetTrigParamsParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_TrigParamsParameters), 'trigParameters'),
      (c_int32, 'startPosFwd'),
      (c_int32, 'intervalFwd'),
      (c_int32, 'numberOfPulsesFwd'),
      (c_int32, 'startPosRev'),
      (c_int32, 'intervalRev'),
      (c_int32, 'numberOfPulsesRev'),
      (c_int32, 'pulseWidth'),
      (c_int32, 'numberOfCycles')]),
    ('KIM_GetTrigParamsParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_TrigParamsParameters), 'trigParameters')]),
    ('KIM_SetTrigParamsParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_TrigParamsParameters), 'trigParameters')]),
    ('KIM_RequestTrigParamsParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_GetFeedbackSigParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int16), 'feedbackSignalMode'),
      (POINTER(c_int32), 'encoderConst')]),
    ('KIM_SetFeedbackSigParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (c_int16, 'feedbackSignalMode'),
      (c_int32, 'encoderConst')]),
    ('KIM_GetFeedbackSigParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_FeedbackSigParams), 'fbSigParameters')]),
    ('KIM_SetFeedbackSigParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(KIM_FeedbackSigParams), 'fbSigParameters')]),
    ('KIM_RequestFeedbackSigParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_GetRelativeMoveParameter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int32), 'relativeMoveStep')]),
    ('KIM_SetRelativeMoveParameter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int32), 'relativeMove')]),
    ('KIM_RequestRelativeMoveParameter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_GetAbsoluteMoveParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int32), 'absoluteMove')]),
    ('KIM_SetAbsoluteMoveParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel'),
      (POINTER(c_int32), 'absoluteMove')]),
    ('KIM_RequestAbsoluteMoveParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('KIM_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('KIM_RequestCurrentPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_GetCurrentPosition', c_int32, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_uint16, 'channel')]),
    ('KIM_IsDualChannelMode', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_SetDualChannelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enableDualChannel')]),
    ('KIM_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('KIM_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('KIM_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('KIM_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('KIM_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

KCube_LaserDiode_FCNS = [
    ('LD_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('LD_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('LD_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('LD_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('LD_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('LD_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('LD_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('LD_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('LD_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('LD_SetOpenLoopMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_SetClosedLoopMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_EnableMaxCurrentAdjust', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enableAdjust'),
      (c_bool, 'enableDiode')]),
    ('LD_RequestMaxCurrentDigPot', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetMaxCurrentDigPot', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetMaxCurrentDigPot', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'maxCurrent')]),
    ('LD_FindTIAGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_EnableTIAGainAdjust', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable')]),
    ('LD_DisableOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_EnableOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestControlSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetControlSource', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetControlSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'source')]),
    ('LD_GetInterlockState', BYTE, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestDisplay', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetDisplayUnits', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetDisplayUnits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'units')]),
    ('LD_GetLEDBrightness', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('LD_RequestLaserSetPoint', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetLaserSetPoint', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetLaserSetPoint', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'laserDiodeCurrent')]),
    ('LD_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestReadings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetPhotoCurrentReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetVoltageReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetLaserDiodeCurrentReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestLaserDiodeMaxCurrentLimit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetLaserDiodeMaxCurrentLimit', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestWACalibFactor', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetWACalibFactor', c_float, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetWACalibFactor', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_float, 'calibFactor')]),
    ('LD_RequestLaserPolarity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetLaserPolarity', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetLaserPolarity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'polarity')]),
    ('LS_RequestMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'dispIntensity')]),
    ('LS_GetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KLD_MMIParams), 'params')]),
    ('LS_SetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KLD_MMIParams), 'params')]),
    ('LS_RequestTrigIOParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetTrigIOParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_ushort), 'mode1'),
      (POINTER(c_ushort), 'polarity1'),
      (POINTER(c_ushort), 'mode2'),
      (POINTER(c_ushort), 'polarity2')]),
    ('LS_SetTrigIOParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'mode1'),
      (c_ushort, 'polarity1'),
      (c_ushort, 'mode2'),
      (c_ushort, 'polarity2')]),
    ('LS_GetTrigIOParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KLD_TrigIOParams), 'params')]),
    ('LS_SetTrigIOParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KLD_TrigIOParams), 'params')]),
    ('LD_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('LD_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('LD_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('LD_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

KCube_LaserSource_FCNS = [
    ('LS_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('LS_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('LS_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('LS_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('LS_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('LS_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('LS_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('LS_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('LS_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('LS_DisableOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_EnableOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestControlSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetControlSource', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_SetControlSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'source')]),
    ('LS_RequestMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'dispIntensity')]),
    ('LS_GetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KLS_MMIParams), 'params')]),
    ('LS_SetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KLS_MMIParams), 'params')]),
    ('LS_RequestOPMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetOPMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_ushort), 'mode')]),
    ('LS_SetOPMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'mode')]),
    ('LS_RequestTrigIOParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetTrigIOParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_ushort), 'mode1'),
      (POINTER(c_ushort), 'polarity1'),
      (POINTER(c_ushort), 'mode2'),
      (POINTER(c_ushort), 'polarity2')]),
    ('LS_SetTrigIOParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'mode1'),
      (c_ushort, 'polarity1'),
      (c_ushort, 'mode2'),
      (c_ushort, 'polarity2')]),
    ('LS_GetTrigIOParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KLS_TrigIOParams), 'params')]),
    ('LS_SetTrigIOParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KLS_TrigIOParams), 'params')]),
    ('LS_GetInterlockState', BYTE, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestWavelength', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetWavelength', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'maxPower'),
      (POINTER(WORD), 'maxCurrent')]),
    ('LS_RequestSetPower', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetPowerSet', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_SetPower', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'power')]),
    ('LS_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestReadings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetPowerReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetCurrentReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('LS_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('LS_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('LS_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

KCube_NanoTrak_FCNS = [
    ('NT_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('NT_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('NT_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('NT_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('NT_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestSignalState', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetSignalState', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetMode', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'mode')]),
    ('NT_RequestTrackingThresholdSignal', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTrackingThresholdSignal', c_float, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetTrackingThresholdSignal', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_float, 'threshold')]),
    ('NT_RequestCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_SetCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_HomeCircle', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestCirclePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCirclePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_RequestCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleParameters), 'params')]),
    ('NT_SetCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleParameters), 'params')]),
    ('NT_GetCircleDiameter', WORD, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_SetCircleDiameter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'diameter')]),
    ('NT_RequestCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleDiameterLUT), 'LUT')]),
    ('NT_SetCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleDiameterLUT), 'LUT')]),
    ('NT_RequestPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'params')]),
    ('NT_SetPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'params')]),
    ('NT_RequestTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_TIARangeParameters), 'params')]),
    ('NT_SetTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_TIARangeParameters), 'params')]),
    ('NT_GetRangeMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'mode'),
      (POINTER(WORD), 'oddOrEven')]),
    ('NT_SetRangeMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'mode'),
      (WORD, 'oddOrEven')]),
    ('NT_GetTIARange', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetTIARange', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'range')]),
    ('NT_RequestGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetGain', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'gain')]),
    ('NT_RequestFeedbackSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetFeedbackSource', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetFeedbackSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'input')]),
    ('NT_GetLEDBrightness', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('NT_RequestIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_IOSettings), 'IOsettings')]),
    ('NT_SetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_IOSettings), 'IOsettings')]),
    ('NT_GetIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'highVoltageOutRange'),
      (POINTER(WORD), 'highVoltageOutputRoute')]),
    ('NT_SetIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'highVoltageOutRange'),
      (WORD, 'highVoltageOutputRoute')]),
    ('NT_GetFeedbackMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel')]),
    ('NT_RequestFeedbackMode', c_bool, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel')]),
    ('NT_SetFeedbackMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (c_short, 'mode')]),
    ('NT_RequestFeedbackLoopPIconsts', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel')]),
    ('NT_GetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (POINTER(c_short), 'proportionalTerm'),
      (POINTER(c_short), 'integralTerm')]),
    ('NT_SetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (c_short, 'proportionalTerm'),
      (c_short, 'integralTerm')]),
    ('NT_GetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (POINTER(KNA_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('NT_SetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (POINTER(KNA_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('NT_RequestMMIParams', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelAdjustRate'),
      (POINTER(c_int16), 'displayIntensity')]),
    ('NT_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelAdjustRate'),
      (c_int16, 'displayIntensity')]),
    ('NT_RequestTriggerConfigParams', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'trigger1Mode'),
      (POINTER(c_int16), 'trigger1Polarity'),
      (POINTER(c_int16), 'trigger2Mode'),
      (POINTER(c_int16), 'trigger2Polarity')]),
    ('NT_SetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'trigger1Mode'),
      (c_int16, 'trigger1Polarity'),
      (c_int16, 'trigger2Mode'),
      (c_int16, 'trigger2Polarity')]),
    ('NT_GetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_MMIParams), 'mmiParams')]),
    ('NT_SetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_MMIParams), 'mmiParams')]),
    ('NT_GetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_TriggerConfig), 'triggerConfigParams')]),
    ('NT_SetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_TriggerConfig), 'triggerConfigParams')]),
    ('NT_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('NT_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('NT_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('NT_RequestReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KNA_TIAReading), 'reading')]),
    ('NT_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('NT_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('NT_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('NT_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestXYScan', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StopXYScan', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_IsXYScanning', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_IsXYScanLineAvailable', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'lineNo')]),
    ('NT_IsXYScanAvailable', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetXYScanRange', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetXYScanLine', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int, 'lineNo'),
      (POINTER(c_byte), 'line'),
      (c_int, 'bufferSize')]),
]

KCube_Piezo_FCNS = [
    ('PCC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('PCC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('PCC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('PCC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('PCC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('PCC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PCC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PCC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestActualPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('PCC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('PCC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('PCC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetPositionControlMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestPositionControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetPositionControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode')]),
    ('PCC_SetZero', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetMaxOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestMaxOutputVoltage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetMaxOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'maxVoltage')]),
    ('PCC_GetOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'volts')]),
    ('PCC_RequestVoltageSource', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetVoltageSource', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetVoltageSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'source')]),
    ('PCC_GetPosition', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'position')]),
    ('PCC_RequestFeedbackLoopPIconsts', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'proportionalTerm'),
      (POINTER(c_short), 'integralTerm')]),
    ('PCC_SetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'proportionalTerm'),
      (c_short, 'integralTerm')]),
    ('PCC_GetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PZ_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('PCC_SetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PZ_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('PCC_SetLUTwaveParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PZ_LUTWaveParameters), 'LUTwaveParams')]),
    ('PCC_SetLUTwaveSample', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'index'),
      (WORD, 'value')]),
    ('PCC_StartLUTwave', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_StopLUTwave', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestLEDBrightness', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetLEDBrightness', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('PCC_RequestIOSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetIOSettings', TPZ_IOSettings, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (TPZ_IOSettings, 'ioSettings')]),
    ('PCC_GetHubAnalogInput', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetHubAnalogInput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'hubAnalogInput')]),
    ('PCC_RequestMMIParams', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelMode'),
      (POINTER(c_int16), 'voltageAdjustRate'),
      (POINTER(c_int32), 'voltageStep'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetVoltage1'),
      (POINTER(c_int32), 'presetVoltage2'),
      (POINTER(c_int16), 'displayIntensity'),
      (POINTER(c_int16), 'displayTimeout'),
      (POINTER(c_int16), 'displayDimIntensity')]),
    ('PCC_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelMode'),
      (POINTER(c_int16), 'voltageAdjustRate'),
      (POINTER(c_int32), 'voltageStep'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetVoltage1'),
      (POINTER(c_int32), 'presetVoltage2'),
      (POINTER(c_int16), 'displayIntensity')]),
    ('PCC_SetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelMode'),
      (c_int16, 'voltageAdjustRate'),
      (c_int32, 'voltageStep'),
      (c_int16, 'directionSense'),
      (c_int32, 'presetVoltage1'),
      (c_int32, 'presetVoltage2'),
      (c_int16, 'displayIntensity'),
      (c_int16, 'displayTimeout'),
      (c_int16, 'displayDimIntensity')]),
    ('PCC_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelMode'),
      (c_int16, 'voltageAdjustRate'),
      (c_int32, 'voltageStep'),
      (c_int16, 'directionSense'),
      (c_int32, 'presetVoltage1'),
      (c_int32, 'presetVoltage2'),
      (c_int16, 'displayIntensity')]),
    ('PCC_RequestTriggerConfigParams', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'trigger1Mode'),
      (POINTER(c_int16), 'trigger1Polarity'),
      (POINTER(c_int16), 'trigger2Mode'),
      (POINTER(c_int16), 'trigger2Polarity')]),
    ('PCC_SetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'trigger1Mode'),
      (c_int16, 'trigger1Polarity'),
      (c_int16, 'trigger2Mode'),
      (c_int16, 'trigger2Polarity')]),
    ('PCC_GetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KPZ_MMIParams), 'mmiParams')]),
    ('PCC_SetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KPZ_MMIParams), 'mmiParams')]),
    ('PCC_GetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KPZ_TriggerConfig), 'triggerConfigParams')]),
    ('PCC_SetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KPZ_TriggerConfig), 'triggerConfigParams')]),
    ('PCC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
]

KCube_PositionAligner_FCNS = [
    ('QD_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('QD_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('QD_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('QD_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('QD_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('QD_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('QD_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('QD_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('QD_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('QD_RequestLoopPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetLoopPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_LoopParameters), 'loopParams')]),
    ('QD_SetLoopPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_LoopParameters), 'loopParams')]),
    ('QD_GetPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_PIDParameters), 'proportionalIntegralDifferentialParams')]),
    ('QD_SetPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_PIDParameters), 'proportionalIntegralDifferentialParams')]),
    ('QD_GetLowPassFilterparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_LowPassFilterParameters), 'lowPassParams')]),
    ('QD_SetLowPassFilterparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_LowPassFilterParameters), 'lowPassParams')]),
    ('QD_GetNotchFilterparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_NotchFilterParameters), 'notchParams')]),
    ('QD_SetNotchFilterparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_NotchFilterParameters), 'proportionalIntegralDifferentialParams')]),
    ('QD_RequestPosDemandParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetPosDemandParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_PositionDemandParameters), 'demandParams')]),
    ('QD_SetPosDemandParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_PositionDemandParameters), 'demandParams')]),
    ('QD_RequestTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_KPA_TrigIOConfig), 'triggerParams')]),
    ('QD_SetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_KPA_TrigIOConfig), 'triggerParams')]),
    ('QD_RequestDigitalOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_SetDigitalOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_KPA_DigitalIO), 'digitalIO')]),
    ('QD_GetDigitalOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_KPA_DigitalIO), 'digitalIO')]),
    ('QD_RequestOperatingMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetOperatingMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_SetOperatingMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_bool, 'autoOpenCloseLoop')]),
    ('QD_RequestLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetLEDBrightness', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('QD_GetDemandedPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_Position), 'position')]),
    ('QD_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_Position), 'position')]),
    ('QD_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_RequestReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_Readings), 'reading')]),
    ('QD_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('QD_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('QD_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('QD_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

KCube_Solenoid_FCNS = [
    ('SC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetLEDswitches', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_SetLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'LEDswitches')]),
    ('SC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('SC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('SC_RequestHubBay', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('SC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('SC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('SC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('SC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('SC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestOperatingMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetOperatingMode', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_SetOperatingMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'mode')]),
    ('SC_GetSolenoidState', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestOperatingState', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetOperatingState', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_SetOperatingState', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'state')]),
    ('SC_RequestCycleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetCycleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_uint), 'onTime'),
      (POINTER(c_uint), 'offTime'),
      (POINTER(c_uint), 'numCycles')]),
    ('SC_SetCycleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'onTime'),
      (c_uint, 'offTime'),
      (c_uint, 'numCycles')]),
    ('SC_GetCycleParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(SC_CycleParameters), 'cycleParams')]),
    ('SC_SetCycleParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(SC_CycleParameters), 'cycleParams')]),
    ('SC_RequestMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'displayIntensity'),
      (POINTER(c_int16), 'displayTimeout'),
      (POINTER(c_int16), 'displayDimIntensity')]),
    ('SC_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'displayIntensity')]),
    ('SC_SetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'displayIntensity'),
      (c_int16, 'displayTimeout'),
      (c_int16, 'displayDimIntensity')]),
    ('SC_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'displayIntensity')]),
    ('SC_GetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KSC_MMIParams), 'mmiParams')]),
    ('SC_SetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KSC_MMIParams), 'mmiParams')]),
    ('SC_RequestTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'trigger1Mode'),
      (POINTER(c_int16), 'trigger1Polarity'),
      (POINTER(c_int16), 'trigger2Mode'),
      (POINTER(c_int16), 'trigger2Polarity')]),
    ('SC_SetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'trigger1Mode'),
      (c_int16, 'trigger1Polarity'),
      (c_int16, 'trigger2Mode'),
      (c_int16, 'trigger2Polarity')]),
    ('SC_GetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KSC_TriggerConfig), 'triggerConfigParams')]),
    ('SC_SetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KSC_TriggerConfig), 'triggerConfigParams')]),
    ('SC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
]

KCube_StepperMotor_FCNS = [
    ('SCC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetStageType', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'stageId')]),
    ('SCC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('SCC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('SCC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetCalibrationFile', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'filename'),
      (c_bool, 'enabled')]),
    ('SCC_IsCalibrationActive', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetCalibrationFile', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'filename'),
      (c_short, 'sizeOfBuffer')]),
    ('SCC_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SCC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('SCC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SCC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('SCC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'index')]),
    ('SCC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('SCC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SCC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SCC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'velocity')]),
    ('SCC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'displacement')]),
    ('SCC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('SCC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('SCC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'stepSize')]),
    ('SCC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('SCC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('SCC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'jogDirection')]),
    ('SCC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('SCC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('SCC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'direction')]),
    ('SCC_SetDirection', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'reverse')]),
    ('SCC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'distance')]),
    ('SCC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('SCC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('SCC_RequestLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'clockwiseHardwareLimit'),
      (POINTER(WORD), 'anticlockwiseHardwareLimit'),
      (POINTER(c_uint), 'clockwisePosition'),
      (POINTER(c_uint), 'anticlockwisePosition'),
      (POINTER(WORD), 'softLimitMode')]),
    ('SCC_SetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'clockwiseHardwareLimit'),
      (WORD, 'anticlockwiseHardwareLimit'),
      (c_uint, 'clockwisePosition'),
      (c_uint, 'anticlockwisePosition'),
      (WORD, 'softLimitMode')]),
    ('SCC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('SCC_RequestMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelMode'),
      (POINTER(c_int32), 'wheelMaxVelocity'),
      (POINTER(c_int32), 'wheelAcceleration'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetPosition1'),
      (POINTER(c_int32), 'presetPosition2'),
      (POINTER(c_int16), 'displayIntensity'),
      (POINTER(c_int16), 'displayTimeout'),
      (POINTER(c_int16), 'displayDimIntensity')]),
    ('SCC_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'wheelMode'),
      (POINTER(c_int32), 'wheelMaxVelocity'),
      (POINTER(c_int32), 'wheelAcceleration'),
      (POINTER(c_int16), 'directionSense'),
      (POINTER(c_int32), 'presetPosition1'),
      (POINTER(c_int32), 'presetPosition2'),
      (POINTER(c_int16), 'displayIntensity')]),
    ('SCC_SetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelMode'),
      (c_int32, 'wheelMaxVelocity'),
      (c_int32, 'wheelAcceleration'),
      (c_int16, 'directionSense'),
      (c_int32, 'presetPosition1'),
      (c_int32, 'presetPosition2'),
      (c_int16, 'displayIntensity'),
      (c_int16, 'displayTimeout'),
      (c_int16, 'displayDimIntensity')]),
    ('SCC_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'wheelMode'),
      (c_int32, 'wheelMaxVelocity'),
      (c_int32, 'wheelAcceleration'),
      (c_int16, 'directionSense'),
      (c_int32, 'presetPosition1'),
      (c_int32, 'presetPosition2'),
      (c_int16, 'displayIntensity')]),
    ('SCC_RequestTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'trigger1Mode'),
      (POINTER(c_int16), 'trigger1Polarity'),
      (POINTER(c_int16), 'trigger2Mode'),
      (POINTER(c_int16), 'trigger2Polarity')]),
    ('SCC_SetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'trigger1Mode'),
      (c_int16, 'trigger1Polarity'),
      (c_int16, 'trigger2Mode'),
      (c_int16, 'trigger2Polarity')]),
    ('SCC_RequestPosTriggerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetTriggerParamsParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int32), 'triggerStartPositionFwd'),
      (POINTER(c_int32), 'triggerIntervalFwd'),
      (POINTER(c_int32), 'triggerPulseCountFwd'),
      (POINTER(c_int32), 'triggerStartPositionRev'),
      (POINTER(c_int32), 'triggerIntervalRev'),
      (POINTER(c_int32), 'triggerPulseCountRev'),
      (POINTER(c_int32), 'triggerPulseWidth'),
      (POINTER(c_int32), 'cycleCount')]),
    ('SCC_SetTriggerParamsParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int32, 'triggerStartPositionFwd'),
      (c_int32, 'triggerIntervalFwd'),
      (c_int32, 'triggerPulseCountFwd'),
      (c_int32, 'triggerStartPositionRev'),
      (c_int32, 'triggerIntervalRev'),
      (c_int32, 'triggerPulseCountRev'),
      (c_int32, 'triggerPulseWidth'),
      (c_int32, 'cycleCount')]),
    ('SCC_GetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_MMIParams), 'mmiParams')]),
    ('SCC_SetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_MMIParams), 'mmiParams')]),
    ('SCC_GetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerConfig), 'triggerConfigParams')]),
    ('SCC_SetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerConfig), 'triggerConfigParams')]),
    ('SCC_GetTriggerParamsParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerParams), 'triggerParamsParams')]),
    ('SCC_SetTriggerParamsParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerParams), 'triggerParamsParams')]),
    ('SCC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('SCC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('SCC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('SCC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'distance')]),
    ('SCC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('SCC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('SCC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('SCC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('SCC_GetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('SCC_SetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('SCC_RequestPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('SCC_SetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('SCC_RequestBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetBowIndex', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'bowIndex')]),
    ('SCC_UsesPIDLoopEncoding', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetPIDLoopEncoderParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PIDLoopEncoderParams), 'params')]),
    ('SCC_SetPIDLoopEncoderCoeff', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'coeff')]),
    ('SCC_RequestPIDLoopEncoderParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetPIDLoopEncoderParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PIDLoopEncoderParams), 'params')]),
    ('SCC_GetPIDLoopEncoderCoeff', c_double, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('SCC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('SCC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('SCC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('SCC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'travelMode')]),
    ('SCC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('SCC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('SCC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('SCC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('SCC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('SCC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('SCC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('SCC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('SCC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('SCC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
    ('SCC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('SCC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
]

KCube_StrainGauge_FCNS = [
    ('SG_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('SG_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('SG_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SG_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('SG_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SG_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('SG_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetLEDBrightness', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('SG_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('SG_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SG_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SG_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('SG_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('SG_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('SG_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetReading', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'smoothed')]),
    ('SG_GetReadingExt', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'clipReadng'),
      (POINTER(c_bool), 'overrange')]),
    ('SG_RequestMaximumTravel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetMaximumTravel', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetZero', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TSG_IOSettings), 'inputOutputSettings')]),
    ('SG_SetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TSG_IOSettings), 'inputOutputSettings')]),
    ('SG_SetIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'hubAnalogOutput'),
      (c_short, 'displayMode'),
      (c_uint, 'calibrationForce')]),
    ('SG_RequestHubAnalogOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetHubAnalogOutput', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetHubAnalogOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'hubAnalogOutput')]),
    ('SG_RequestDisplayMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetDisplayMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetDisplayMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode')]),
    ('SG_RequestForceCalib', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetForceCalib', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetForceCalib', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'forceCalibration')]),
    ('SG_RequestMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'displayIntensity'),
      (POINTER(c_int16), 'displayTimeout'),
      (POINTER(c_int16), 'displayDimIntensity')]),
    ('SG_GetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'displayIntensity')]),
    ('SG_SetMMIParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'displayIntensity'),
      (c_int16, 'displayTimeout'),
      (c_int16, 'displayDimIntensity')]),
    ('SG_SetMMIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'displayIntensity')]),
    ('SG_RequestTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'trigger1Mode'),
      (POINTER(c_int16), 'trigger1Polarity'),
      (POINTER(c_int16), 'trigger2Mode'),
      (POINTER(c_int16), 'trigger2Polarity'),
      (POINTER(c_int32), 'lowerLimit'),
      (POINTER(c_int32), 'upperLimit'),
      (POINTER(c_int16), 'smoothingSamples')]),
    ('SG_SetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'trigger1Mode'),
      (c_int16, 'trigger1Polarity'),
      (c_int16, 'trigger2Mode'),
      (c_int16, 'trigger2Polarity'),
      (c_int32, 'lowerLimit'),
      (c_int32, 'upperLimit'),
      (c_int16, 'smoothingSamples')]),
    ('SG_GetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KSG_MMIParams), 'mmiParams')]),
    ('SG_SetMMIParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KSG_MMIParams), 'mmiParams')]),
    ('SG_GetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KSG_TriggerConfig), 'triggerConfigParams')]),
    ('SG_SetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KSG_TriggerConfig), 'triggerConfigParams')]),
    ('SG_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
]

ModularRack_FCNS = [
    ('MMR_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('MMR_Close', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('MMR_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('MMR_IsChannelValid', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('MMR_MaxChannelCount', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('MMR_Identify', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channelNo')]),
    ('MMR_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(c_short), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('MMR_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('MMR_GetNumChannels', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('MMR_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('MMR_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('MMR_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channelNo')]),
    ('MMR_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('MMR_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('MMR_ClearMessageQueue', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('MMR_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (MotionControlCallback, 'functionPointer')]),
    ('MMR_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('MMR_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('MMR_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('MMR_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('MMR_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('MMR_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'brightness')]),
]

ModularRack_NanoTrak_FCNS = [
    ('NT_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('NT_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('NT_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('NT_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestSignalState', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetSignalState', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetMode', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'mode')]),
    ('NT_RequestTrackingThresholdSignal', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTrackingThresholdSignal', c_float, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetTrackingThresholdSignal', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_float, 'threshold')]),
    ('NT_RequestCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_SetCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_HomeCircle', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestCirclePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCirclePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_RequestCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleParameters), 'params')]),
    ('NT_SetCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleParameters), 'params')]),
    ('NT_GetCircleDiameter', WORD, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_SetCircleDiameter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'diameter')]),
    ('NT_RequestCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleDiameterLUT), 'LUT')]),
    ('NT_SetCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleDiameterLUT), 'LUT')]),
    ('NT_RequestPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'params')]),
    ('NT_SetPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'params')]),
    ('NT_RequestTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIARangeParameters), 'params')]),
    ('NT_SetTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIARangeParameters), 'params')]),
    ('NT_GetRangeMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'mode'),
      (POINTER(WORD), 'oddOrEven')]),
    ('NT_SetRangeMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'mode'),
      (WORD, 'oddOrEven')]),
    ('NT_GetTIARange', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetTIARange', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'range')]),
    ('NT_RequestGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetGain', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'gain')]),
    ('NT_RequestTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_LowPassFilterParameters), 'params')]),
    ('NT_SetTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_LowPassFilterParameters), 'params')]),
    ('NT_RequestFeedbackSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetFeedbackSource', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetFeedbackSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'input')]),
    ('NT_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('NT_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('NT_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('NT_RequestReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIAReading), 'reading')]),
    ('NT_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('NT_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('NT_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('NT_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestChannelStates', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_ChannelEnable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (c_bool, 'enable')]),
    ('NT_IsChannelEnabled', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel')]),
    ('NT_RequestControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_SetControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel'),
      (WORD, 'mode')]),
    ('NT_GetControlMode', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (WORD, 'channel')]),
    ('NT_SetNTChannels', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'chanA'),
      (c_short, 'chanB')]),
    ('NT_RequestNTChannels', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetNTChannels', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'chanA'),
      (POINTER(c_short), 'chanB')]),
    ('NT_RequestMaxTravel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetMaxTravel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'chanA'),
      (POINTER(c_double), 'chanB')]),
]

ModularRack_Piezo_FCNS = [
    ('PBC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'milliseconds')]),
    ('PBC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('PBC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('PBC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_ResetParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetZero', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetPositionControlMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetPositionControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'mode')]),
    ('PBC_GetMaxOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetMaxOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'maxVoltage')]),
    ('PBC_GetOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'volts')]),
    ('PBC_GetVoltageSource', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetVoltageSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'source')]),
    ('PBC_GetMaximumTravel', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_GetPosition', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'position')]),
    ('PBC_GetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_short), 'proportionalTerm'),
      (POINTER(c_short), 'integralTerm')]),
    ('PBC_SetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'proportionalTerm'),
      (c_short, 'integralTerm')]),
    ('PBC_GetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(PZ_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('PBC_SetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(PZ_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('PBC_SetLUTwaveParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(PZ_LUTWaveParameters), 'LUTwaveParams')]),
    ('PBC_SetLUTwaveSample', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'index'),
      (WORD, 'value')]),
    ('PBC_StartLUTwave', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('PBC_StopLUTwave', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
]

ModularRack_StepperMotor_FCNS = [
    ('SBC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetCalibrationFile', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'filename'),
      (c_bool, 'enabled')]),
    ('SBC_IsCalibrationActive', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetCalibrationFile', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'filename'),
      (c_short, 'sizeOfBuffer')]),
    ('SBC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'index')]),
    ('SBC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'velocity')]),
    ('SBC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'displacement')]),
    ('SBC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('SBC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('SBC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'stepSize')]),
    ('SBC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('SBC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('SBC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'jogDirection')]),
    ('SBC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('SBC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('SBC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'direction')]),
    ('SBC_SetDirection', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'reverse')]),
    ('SBC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'distance')]),
    ('SBC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('SBC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('SBC_GetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'clockwiseHardwareLimit'),
      (POINTER(WORD), 'anticlockwiseHardwareLimit'),
      (POINTER(c_uint), 'clockwisePosition'),
      (POINTER(c_uint), 'anticlockwisePosition'),
      (POINTER(WORD), 'softLimitMode')]),
    ('SBC_SetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (WORD, 'clockwiseHardwareLimit'),
      (WORD, 'anticlockwiseHardwareLimit'),
      (c_uint, 'clockwisePosition'),
      (c_uint, 'anticlockwisePosition'),
      (WORD, 'softLimitMode')]),
    ('SBC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('SBC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParameters')]),
    ('SBC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParameters')]),
    ('SBC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'position')]),
    ('SBC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'distance')]),
    ('SBC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('SBC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('SBC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParameters')]),
    ('SBC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParameters')]),
    ('SBC_GetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('SBC_SetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('SBC_GetTriggerSwitches', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'indicatorBits')]),
    ('SBC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'outputsBits')]),
    ('SBC_RequestInputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetInputVoltage', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('SBC_SetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('SBC_GetBowIndex', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'bowIndex')]),
    ('SBC_GetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('SBC_SetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('SBC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'milliseconds')]),
    ('SBC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('SBC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('SBC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('SBC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'travelMode')]),
    ('SBC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('SBC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('SBC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('SBC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('SBC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('SBC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('SBC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('SBC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('SBC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('SBC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('SBC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('SBC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
]

TCube_BrushlessMotor_FCNS = [
    ('BMC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_Close', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetLEDswitches', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'LEDswitches')]),
    ('BMC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(c_short), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('BMC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('BMC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('BMC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('BMC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('BMC_ResetStageToDefaults', c_short, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('BMC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'index')]),
    ('BMC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('BMC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('BMC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('BMC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'velocity')]),
    ('BMC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'displacement')]),
    ('BMC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('BMC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('BMC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'stepSize')]),
    ('BMC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('BMC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'jogDirection')]),
    ('BMC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('BMC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'direction')]),
    ('BMC_SetDirection', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'reverse')]),
    ('BMC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'distance')]),
    ('BMC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('BMC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('BMC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('BMC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('BMC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('BMC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('BMC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'distance')]),
    ('BMC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('BMC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('BMC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('BMC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('BMC_RequestVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityProfileParameters), 'velocityProfileParams')]),
    ('BMC_SetVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityProfileParameters), 'velocityProfileParams')]),
    ('BMC_RequestStageAxisParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetStageAxisParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_StageAxisParameters), 'stageAxisParams')]),
    ('BMC_GetStageAxisParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'stageID'),
      (POINTER(WORD), 'axisID'),
      (c_char_p, 'partNumber'),
      (DWORD, 'size'),
      (POINTER(DWORD), 'serialNumber'),
      (POINTER(DWORD), 'countsPerUnit'),
      (POINTER(c_int), 'minPosition'),
      (POINTER(c_int), 'maxPosition'),
      (POINTER(c_int), 'maxAcceleration'),
      (POINTER(c_int), 'maxDecceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('BMC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('BMC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'travelMode')]),
    ('BMC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'countsPerUnit')]),
    ('BMC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_long), 'countsPerUnit')]),
    ('BMC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'countsPerUnit')]),
    ('BMC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'countsPerUnit')]),
    ('BMC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('BMC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('BMC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('BMC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('BMC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('BMC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('BMC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
    ('BMC_RequestJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('BMC_SetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('BMC_RequestPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessPositionLoopParameters), 'positionLoopParams')]),
    ('BMC_SetPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessPositionLoopParameters), 'positionLoopParams')]),
    ('BMC_RequestTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessTrackSettleParameters), 'settleParams')]),
    ('BMC_SetTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessTrackSettleParameters), 'settleParams')]),
    ('BMC_RequestCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_SetCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_RequestSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_SetSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('BMC_RequestElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessElectricOutputParameters), 'electricOutputParams')]),
    ('BMC_SetElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_BrushlessElectricOutputParameters), 'electricOutputParams')]),
    ('BMC_RequestTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetTriggerSwitches', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_SetTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'indicatorBits')]),
    ('BMC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('BMC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('BMC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('BMC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('BMC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('BMC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

TCube_DCServo_FCNS = [
    ('CC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetLEDswitches', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'LEDswitches')]),
    ('CC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('CC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('CC_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('CC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('CC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('CC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'index')]),
    ('CC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('CC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('CC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('CC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'velocity')]),
    ('CC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'displacement')]),
    ('CC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('CC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('CC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'stepSize')]),
    ('CC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('CC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('CC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'jogDirection')]),
    ('CC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('CC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('CC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'direction')]),
    ('CC_SetDirection', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'reverse')]),
    ('CC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'distance')]),
    ('CC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('CC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('CC_RequestLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'clockwiseHardwareLimit'),
      (POINTER(WORD), 'anticlockwiseHardwareLimit'),
      (POINTER(c_uint), 'clockwisePosition'),
      (POINTER(c_uint), 'anticlockwisePosition'),
      (POINTER(WORD), 'softLimitMode')]),
    ('CC_SetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'clockwiseHardwareLimit'),
      (WORD, 'anticlockwiseHardwareLimit'),
      (c_uint, 'clockwisePosition'),
      (c_uint, 'anticlockwisePosition'),
      (WORD, 'softLimitMode')]),
    ('CC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('CC_RequestButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'buttonMode'),
      (POINTER(c_int), 'leftButtonPosition'),
      (POINTER(c_int), 'rightButtonPosition'),
      (POINTER(c_short), 'timeout')]),
    ('CC_SetButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'buttonMode'),
      (c_int, 'leftButtonPosition'),
      (c_int, 'rightButtonPosition')]),
    ('CC_RequestPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'index'),
      (POINTER(WORD), 'thresholdDeflection'),
      (POINTER(DWORD), 'velocity')]),
    ('CC_SetPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'index'),
      (WORD, 'thresholdDeflection'),
      (DWORD, 'velocity')]),
    ('CC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('CC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('CC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('CC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'distance')]),
    ('CC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('CC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('CC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('CC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('CC_GetButtonParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_ButtonParameters), 'buttonParams')]),
    ('CC_SetButtonParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_ButtonParameters), 'buttonParams')]),
    ('CC_GetPotentiometerParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PotentiometerSteps), 'potentiometerSteps')]),
    ('CC_SetPotentiometerParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PotentiometerSteps), 'potentiometerSteps')]),
    ('CC_GetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('CC_SetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('CC_RequestDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_DC_PIDParameters), 'DCproportionalIntegralDifferentialParams')]),
    ('CC_SetDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_DC_PIDParameters), 'DCproportionalIntegralDifferentialParams')]),
    ('CC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('CC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('CC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('CC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('CC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'travelMode')]),
    ('CC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('CC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('CC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('CC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('CC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('CC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('CC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('CC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('CC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('CC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('CC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
]

TCube_InertialMotor_FCNS = [
    ('TIM_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TIM_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('TIM_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('TIM_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('TIM_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('TIM_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('TIM_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TIM_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_Reset', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TIM_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TIM_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('TIM_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('TIM_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('TIM_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (c_long, 'position')]),
    ('TIM_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (c_int32, 'position')]),
    ('TIM_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (c_byte, 'jogDirection')]),
    ('TIM_MoveStop', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_RequestDriveOPParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_SetDriveOPParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (c_int16, 'maxVoltage'),
      (c_int32, 'stepRate'),
      (c_int32, 'stepAcceleration')]),
    ('TIM_GetDriveOPParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(c_int16), 'maxVoltage'),
      (POINTER(c_int32), 'stepRate'),
      (POINTER(c_int32), 'stepAcceleration')]),
    ('TIM_SetDriveOPParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(TIM_DriveOPParameters), 'driveOPParameters')]),
    ('TIM_GetDriveOPParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(TIM_DriveOPParameters), 'driveOPParameters')]),
    ('TIM_RequestJogParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_SetJogParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (c_uint16, 'jogMode'),
      (c_int32, 'jogStepSize'),
      (c_int32, 'jogStepRate'),
      (c_int32, 'jogStepAcceleration')]),
    ('TIM_GetJogParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(c_uint16), 'jogMode'),
      (POINTER(c_int32), 'jogStepSize'),
      (POINTER(c_int32), 'jogStepRate'),
      (POINTER(c_int32), 'jogStepAcceleration')]),
    ('TIM_SetJogParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(TIM_JogParameters), 'jogParameters')]),
    ('TIM_GetJogParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(TIM_JogParameters), 'jogParameters')]),
    ('TIM_RequestButtonParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_SetButtonParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (c_uint16, 'buttonMode'),
      (c_int32, 'position1'),
      (c_int32, 'position2')]),
    ('TIM_GetButtonParameters', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(c_uint16), 'buttonMode'),
      (POINTER(c_int32), 'position1'),
      (POINTER(c_int32), 'position2')]),
    ('TIM_SetButtonParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(TIM_ButtonParameters), 'buttonParameters')]),
    ('TIM_GetButtonParametersStruct', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (POINTER(TIM_ButtonParameters), 'buttonParameters')]),
    ('TIM_SetMaxPotStepRate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel'),
      (c_int32, 'maxPotStepRate')]),
    ('TIM_RequestMaxPotStepRate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_GetMaxPotStepRate', c_int32, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_GetLEDBrightness', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('TIM_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TIM_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TIM_RequestCurrentPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_GetCurrentPosition', c_int32, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'channel')]),
    ('TIM_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('TIM_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('TIM_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('TIM_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TIM_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

TCube_LaserDiode_FCNS = [
    ('LD_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('LD_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('LD_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('LD_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('LD_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('LD_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('LD_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('LD_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('LD_SetOpenLoopMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_SetClosedLoopMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_EnableMaxCurrentAdjust', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enableAdjust'),
      (c_bool, 'enableDiode')]),
    ('LD_RequestMaxCurrentDigPot', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetMaxCurrentDigPot', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetMaxCurrentDigPot', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'maxCurrent')]),
    ('LD_FindTIAGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_EnableTIAGainAdjust', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable')]),
    ('LD_DisableOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_EnableOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestControlSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetControlSource', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetControlSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'source')]),
    ('LD_GetInterlockState', BYTE, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestDisplay', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetDisplayUnits', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetDisplayUnits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'units')]),
    ('LD_GetLEDBrightness', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('LD_RequestLaserSetPoint', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetLaserSetPoint', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetLaserSetPoint', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'laserDiodeCurrent')]),
    ('LD_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestReadings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetPhotoCurrentReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetVoltageReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_GetLaserDiodeCurrentReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestLaserDiodeMaxCurrentLimit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetLaserDiodeMaxCurrentLimit', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestWACalibFactor', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetWACalibFactor', c_float, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetWACalibFactor', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_float, 'calibFactor')]),
    ('LD_RequestLaserPolarity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LD_GetLaserPolarity', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_SetLaserPolarity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'polarity')]),
    ('LD_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('LD_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('LD_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('LD_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LD_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

TCube_LaserSource_FCNS = [
    ('LS_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('LS_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('LS_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('LS_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('LS_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('LS_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('LS_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('LS_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('LS_DisableOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_EnableOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestControlSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetControlSource', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_SetControlSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'source')]),
    ('LS_GetInterlockState', BYTE, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestDisplayUnits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetDisplayUnits', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_SetDisplayUnits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'units')]),
    ('LS_RequestLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetLEDBrightness', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('LS_RequestLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestWavelength', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetWavelength', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'maxPower'),
      (POINTER(WORD), 'maxCurrent')]),
    ('LS_RequestSetPower', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetPowerSet', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_SetPower', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'power')]),
    ('LS_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestReadings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('LS_GetPowerReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetCurrentReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('LS_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('LS_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('LS_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('LS_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

TCube_NanoTrak_FCNS = [
    ('NT_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('NT_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('NT_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('NT_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('NT_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestSignalState', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetSignalState', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetMode', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'mode')]),
    ('NT_RequestTrackingThresholdSignal', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTrackingThresholdSignal', c_float, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetTrackingThresholdSignal', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_float, 'threshold')]),
    ('NT_RequestCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_SetCircleHomePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_HomeCircle', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestCirclePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCirclePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'position')]),
    ('NT_RequestCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleParameters), 'params')]),
    ('NT_SetCircleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleParameters), 'params')]),
    ('NT_GetCircleDiameter', WORD, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_SetCircleDiameter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'diameter')]),
    ('NT_RequestCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleDiameterLUT), 'LUT')]),
    ('NT_SetCircleDiameterLUT', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_CircleDiameterLUT), 'LUT')]),
    ('NT_RequestPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'params')]),
    ('NT_SetPhaseCompensationParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_HVComponent), 'params')]),
    ('NT_RequestTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIARangeParameters), 'params')]),
    ('NT_SetTIArangeParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIARangeParameters), 'params')]),
    ('NT_GetRangeMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'mode'),
      (POINTER(WORD), 'oddOrEven')]),
    ('NT_SetRangeMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'mode'),
      (WORD, 'oddOrEven')]),
    ('NT_GetTIARange', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetTIARange', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'range')]),
    ('NT_RequestGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetGain', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetGain', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'gain')]),
    ('NT_RequestTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_LowPassFilterParameters), 'params')]),
    ('NT_SetTIALPFilterParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_LowPassFilterParameters), 'params')]),
    ('NT_RequestFeedbackSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetFeedbackSource', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetFeedbackSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'input')]),
    ('NT_GetLEDBrightness', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('NT_RequestIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_IOSettings), 'IOsettings')]),
    ('NT_SetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_IOSettings), 'IOsettings')]),
    ('NT_GetIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'lowVoltageOutRange'),
      (POINTER(WORD), 'lowVoltageOutputRoute')]),
    ('NT_SetIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'lowVoltageOutRange'),
      (WORD, 'lowVoltageOutputRoute')]),
    ('NT_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('NT_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('NT_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('NT_RequestReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(NT_TIAReading), 'reading')]),
    ('NT_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('NT_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('NT_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('NT_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('NT_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('NT_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

TCube_Piezo_FCNS = [
    ('PCC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('PCC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('PCC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('PCC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('PCC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PCC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('PCC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestPosition', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('PCC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('PCC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('PCC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetPositionControlMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestPositionControlMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetPositionControlMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode')]),
    ('PCC_SetZero', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetMaxOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetMaxOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'maxVoltage')]),
    ('PCC_GetOutputVoltage', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetOutputVoltage', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'volts')]),
    ('PCC_RequestVoltageSource', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetVoltageSource', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetVoltageSource', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'source')]),
    ('PCC_GetPosition', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'position')]),
    ('PCC_RequestFeedbackLoopPIconsts', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'proportionalTerm'),
      (POINTER(c_short), 'integralTerm')]),
    ('PCC_SetFeedbackLoopPIconsts', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'proportionalTerm'),
      (c_short, 'integralTerm')]),
    ('PCC_GetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PZ_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('PCC_SetFeedbackLoopPIconstsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PZ_FeedbackLoopConstants), 'proportionalAndIntegralConstants')]),
    ('PCC_SetLUTwaveParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(PZ_LUTWaveParameters), 'LUTwaveParams')]),
    ('PCC_SetLUTwaveSample', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'index'),
      (WORD, 'value')]),
    ('PCC_StartLUTwave', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_StopLUTwave', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('PCC_RequestLEDBrightness', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetLEDBrightness', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('PCC_RequestIOSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('PCC_GetIOSettings', TPZ_IOSettings, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetIOSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (TPZ_IOSettings, 'ioSettings')]),
    ('PCC_GetHubAnalogInput', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('PCC_SetHubAnalogInput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'hubAnalogInput')]),
]

TCube_Quad_FCNS = [
    ('QD_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('QD_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('QD_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('QD_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('QD_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('QD_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('QD_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('QD_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('QD_RequestLoopPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetLoopPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_LoopParameters), 'loopParams')]),
    ('QD_SetLoopPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_LoopParameters), 'loopParams')]),
    ('QD_GetPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_PIDParameters), 'proportionalIntegralDifferentialParams')]),
    ('QD_SetPIDparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_PIDParameters), 'proportionalIntegralDifferentialParams')]),
    ('QD_GetLowPassFilterparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_LowPassFilterParameters), 'lowPassParams')]),
    ('QD_SetLowPassFilterparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_LowPassFilterParameters), 'lowPassParams')]),
    ('QD_GetNotchFilterparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_NotchFilterParameters), 'notchParams')]),
    ('QD_SetNotchFilterparams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_NotchFilterParameters), 'proportionalIntegralDifferentialParams')]),
    ('QD_RequestPosDemandParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetPosDemandParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_PositionDemandParameters), 'demandParams')]),
    ('QD_SetPosDemandParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_PositionDemandParameters), 'demandParams')]),
    ('QD_RequestOperatingMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetOperatingMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_SetOperatingMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode')]),
    ('QD_RequestLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetLEDBrightness', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('QD_GetDemandedPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_Position), 'position')]),
    ('QD_SetPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_Position), 'position')]),
    ('QD_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_RequestReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('QD_GetReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(QD_Readings), 'reading')]),
    ('QD_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('QD_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('QD_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('QD_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('QD_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

TCube_Solenoid_FCNS = [
    ('SC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetLEDswitches', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_SetLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'LEDswitches')]),
    ('SC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('SC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('SC_RequestHubBay', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('SC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('SC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('SC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('SC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('SC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestOperatingMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetOperatingMode', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_SetOperatingMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'mode')]),
    ('SC_GetSolenoidState', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_RequestOperatingState', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetOperatingState', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SC_SetOperatingState', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'state')]),
    ('SC_RequestCycleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SC_GetCycleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_uint), 'pOpenTime'),
      (POINTER(c_uint), 'pClosedTime'),
      (POINTER(c_uint), 'numCycles')]),
    ('SC_SetCycleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'openTime'),
      (c_uint, 'closedTime'),
      (c_uint, 'numCycles')]),
    ('SC_GetCycleParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(SC_CycleParameters), 'cycleParams')]),
    ('SC_SetCycleParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(SC_CycleParameters), 'cycleParams')]),
]

TCube_StepperMotor_FCNS = [
    ('SCC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetLEDswitches', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'LEDswitches')]),
    ('SCC_SetStageType', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'stageId')]),
    ('SCC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('SCC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('SCC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetCalibrationFile', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'filename'),
      (c_bool, 'enabled')]),
    ('SCC_IsCalibrationActive', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetCalibrationFile', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'filename'),
      (c_short, 'sizeOfBuffer')]),
    ('SCC_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SCC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('SCC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SCC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'index')]),
    ('SCC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('SCC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SCC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SCC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'velocity')]),
    ('SCC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'displacement')]),
    ('SCC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('SCC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('SCC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'stepSize')]),
    ('SCC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('SCC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('SCC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'jogDirection')]),
    ('SCC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('SCC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('SCC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'direction')]),
    ('SCC_SetDirection', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'reverse')]),
    ('SCC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'distance')]),
    ('SCC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('SCC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('SCC_RequestLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'clockwiseHardwareLimit'),
      (POINTER(WORD), 'anticlockwiseHardwareLimit'),
      (POINTER(c_uint), 'clockwisePosition'),
      (POINTER(c_uint), 'anticlockwisePosition'),
      (POINTER(WORD), 'softLimitMode')]),
    ('SCC_SetLimitSwitchParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'clockwiseHardwareLimit'),
      (WORD, 'anticlockwiseHardwareLimit'),
      (c_uint, 'clockwisePosition'),
      (c_uint, 'anticlockwisePosition'),
      (WORD, 'softLimitMode')]),
    ('SCC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('SCC_RequestButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'buttonMode'),
      (POINTER(c_int), 'leftButtonPosition'),
      (POINTER(c_int), 'rightButtonPosition'),
      (POINTER(c_short), 'timeout')]),
    ('SCC_SetButtonParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'buttonMode'),
      (c_int, 'leftButtonPosition'),
      (c_int, 'rightButtonPosition')]),
    ('SCC_RequestPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'index'),
      (POINTER(WORD), 'thresholdDeflection'),
      (POINTER(DWORD), 'velocity')]),
    ('SCC_SetPotentiometerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'index'),
      (WORD, 'thresholdDeflection'),
      (DWORD, 'velocity')]),
    ('SCC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('SCC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('SCC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('SCC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'distance')]),
    ('SCC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('SCC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('SCC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('SCC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('SCC_GetButtonParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_ButtonParameters), 'buttonParams')]),
    ('SCC_SetButtonParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_ButtonParameters), 'buttonParams')]),
    ('SCC_GetPotentiometerParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PotentiometerSteps), 'potentiometerSteps')]),
    ('SCC_SetPotentiometerParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PotentiometerSteps), 'potentiometerSteps')]),
    ('SCC_GetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('SCC_SetLimitSwitchParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_LimitSwitchParameters), 'limitSwitchParams')]),
    ('SCC_RequestPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('SCC_SetPowerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_PowerParameters), 'powerParams')]),
    ('SCC_RequestBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetBowIndex', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetBowIndex', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'bowIndex')]),
    ('SCC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('SCC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('SCC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('SCC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('SCC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'travelMode')]),
    ('SCC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('SCC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('SCC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('SCC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('SCC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('SCC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('SCC_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SCC_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('SCC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('SCC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('SCC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('SCC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
]

TCube_StrainGauge_FCNS = [
    ('SG_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('SG_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('SG_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SG_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('SG_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('SG_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetLEDBrightness', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('SG_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('SG_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SG_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('SG_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('SG_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('SG_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('SG_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestReading', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetReading', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'smoothed')]),
    ('SG_GetReadingExt', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'clipReadng'),
      (POINTER(c_bool), 'overrange')]),
    ('SG_RequestMaximumTravel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetMaximumTravel', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetZero', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_RequestIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TSG_IOSettings), 'inputOutputSettings')]),
    ('SG_SetIOsettingsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TSG_IOSettings), 'inputOutputSettings')]),
    ('SG_SetIOsettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'hubAnalogOutput'),
      (c_short, 'displayMode'),
      (c_uint, 'calibrationForce')]),
    ('SG_RequestHubAnalogOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetHubAnalogOutput', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetHubAnalogOutput', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'hubAnalogOutput')]),
    ('SG_RequestDisplayMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetDisplayMode', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetDisplayMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode')]),
    ('SG_RequestForceCalib', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('SG_GetForceCalib', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('SG_SetForceCalib', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'forceCalibration')]),
]

TCube_TEC_FCNS = [
    ('TC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('TC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('TC_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('TC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('TC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('TC_Disable', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_Enable', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_Reset', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_Disconnect', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('TC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('TC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('TC_RequestTemperatureSet', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_GetTemperatureSet', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_SetTemperature', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'temperature')]),
    ('TC_RequestHWDisplayMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_GetHWDisplayMode', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_SetHWDisplayMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'mode')]),
    ('TC_RequestLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_GetLEDBrightness', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_SetLEDBrightness', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'brightness')]),
    ('TC_RequestCurrentLimit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_GetCurrentLimit', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_SetCurrentLimit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'maxCurrent')]),
    ('TC_RequestSensorType', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_GetSensorType', c_ushort, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_SetSensorType', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_ushort, 'sensor')]),
    ('TC_RequestTempLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_GetTempLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TC_LoopParameters), 'proportionalIntegralDifferentialParams')]),
    ('TC_SetTempLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TC_LoopParameters), 'proportionalIntegralDifferentialParams')]),
    ('TC_RequestStatus', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_RequestReadings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TC_GetTemperatureReading', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_GetCurrentReading', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('TC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('TC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('TC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
]

TDIEngine_FCNS = [
    ('TDI_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TDI_Close', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TDI_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TDI_IsChannelValid', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_MaxChannelCount', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TDI_Identify', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TDI_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(c_short), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('TDI_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('TDI_GetNumChannels', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TDI_GetFirmwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TDI_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_char_p, 'settingsName')]),
    ('TDI_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_OverrideHomeRequirement', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_ClearMessageQueue', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_RegisterMessageCallback', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (MotionControlCallback, 'functionPointer')]),
    ('TDI_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('TDI_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('TDI_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'velocity')]),
    ('TDI_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('TDI_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('TDI_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_uint, 'stepSize')]),
    ('TDI_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('TDI_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('TDI_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'jogDirection')]),
    ('TDI_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('TDI_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('TDI_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'index')]),
    ('TDI_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'displacement')]),
    ('TDI_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_short, 'direction')]),
    ('TDI_SetDirection', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'reverse')]),
    ('TDI_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'distance')]),
    ('TDI_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('TDI_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'count')]),
    ('TDI_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('TDI_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('TDI_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'position')]),
    ('TDI_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'distance')]),
    ('TDI_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('TDI_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('TDI_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('TDI_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('TDI_RequestVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityProfileParameters), 'velocityProfileParams')]),
    ('TDI_SetVelocityProfileParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_VelocityProfileParameters), 'velocityProfileParams')]),
    ('TDI_RequestStageAxisParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetStageAxisParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_StageAxisParameters), 'stageAxisParams')]),
    ('TDI_GetStageAxisParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(WORD), 'stageID'),
      (POINTER(WORD), 'axisID'),
      (c_char_p, 'partNumber'),
      (DWORD, 'size'),
      (POINTER(DWORD), 'serialNumber'),
      (POINTER(DWORD), 'countsPerUnit'),
      (POINTER(c_int), 'minPosition'),
      (POINTER(c_int), 'maxPosition'),
      (POINTER(c_int), 'maxAcceleration'),
      (POINTER(c_int), 'maxDecceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('TDI_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('TDI_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('TDI_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'travelMode')]),
    ('TDI_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_long, 'countsPerUnit')]),
    ('TDI_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_long), 'countsPerUnit')]),
    ('TDI_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'countsPerUnit')]),
    ('TDI_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'countsPerUnit')]),
    ('TDI_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('TDI_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('TDI_ResetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetRotationModes', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'mode'),
      (c_int, 'direction')]),
    ('TDI_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('TDI_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('TDI_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('TDI_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
    ('TDI_RequestJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('TDI_SetJoystickParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_JoystickParameters), 'joystickParams')]),
    ('TDI_RequestPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessPositionLoopParameters), 'positionLoopParams')]),
    ('TDI_SetPosLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessPositionLoopParameters), 'positionLoopParams')]),
    ('TDI_RequestTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessTrackSettleParameters), 'settleParams')]),
    ('TDI_SetTrackSettleParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessTrackSettleParameters), 'settleParams')]),
    ('TDI_RequestCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('TDI_SetCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('TDI_RequestSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('TDI_SetSettledCurrentLoopParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessCurrentLoopParameters), 'currentLoopParams')]),
    ('TDI_RequestElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessElectricOutputParameters), 'electricOutputParams')]),
    ('TDI_SetElectricOutputParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(MOT_BrushlessElectricOutputParameters), 'electricOutputParams')]),
    ('TDI_RequestTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetTriggerSwitches', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetTriggerSwitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'indicatorBits')]),
    ('TDI_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_byte, 'outputsBits')]),
    ('TDI_RequestRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TDI_GetRackDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TDI_SetRackDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
    ('TDI_RequestRackStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('TDI_GetRackStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TDI_SetTDIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'spiData')]),
    ('TDI_GetTDIParams', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('TDI_RequestTDIParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'spiAddress')]),
    ('TDI_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_int, 'milliseconds')]),
    ('TDI_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('TDI_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('TDI_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
    ('TDI_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'channel')]),
]

VerticalStage_FCNS = [
    ('CC_Open', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_Close', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CheckConnection', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_Identify', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetLEDswitches', WORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetLEDswitches', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (WORD, 'LEDswitches')]),
    ('CC_GetHardwareInfo', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'modelNo'),
      (DWORD, 'sizeOfModelNo'),
      (POINTER(WORD), 'type'),
      (POINTER(WORD), 'numChannels'),
      (c_char_p, 'notes'),
      (DWORD, 'sizeOfNotes'),
      (POINTER(DWORD), 'firmwareVersion'),
      (POINTER(WORD), 'hardwareVersion'),
      (POINTER(WORD), 'modificationState')]),
    ('CC_GetHardwareInfoBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(TLI_HardwareInformation), 'hardwareInfo')]),
    ('CC_GetHubBay', c_char, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetSoftwareVersion', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_LoadSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('CC_LoadNamedSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_char_p, 'settingsName')]),
    ('CC_PersistSettings', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('CC_ResetStageToDefaults', c_short, 'errcheck_true',
     [(c_char_p, 'serialNo')]),
    ('CC_DisableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_EnableChannel', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_CanDeviceLockFrontPanel', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetFrontPanelLocked', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestFrontPanelLocked', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_SetFrontPanelLock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_bool, 'locked')]),
    ('CC_GetNumberPositions', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveToPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'index')]),
    ('CC_GetPosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CanHome', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_NeedsHoming', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_CanMoveWithoutHomingFirst', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_Home', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_ClearMessageQueue', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RegisterMessageCallback', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (MotionControlCallback, 'functionPointer')]),
    ('CC_MessageQueueSize', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetNextMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('CC_WaitForMessage', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (POINTER(WORD), 'messageType'),
      (POINTER(WORD), 'messageID'),
      (POINTER(DWORD), 'messageData')]),
    ('CC_RequestHomingParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetHomingVelocity', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetHomingVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'velocity')]),
    ('CC_MoveRelative', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'displacement')]),
    ('CC_RequestJogParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_short), 'mode'),
      (POINTER(c_short), 'stopMode')]),
    ('CC_SetJogMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'mode'),
      (c_short, 'stopMode')]),
    ('CC_GetJogStepSize', c_uint, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetJogStepSize', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_uint, 'stepSize')]),
    ('CC_GetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('CC_SetJogVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('CC_MoveJog', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'jogDirection')]),
    ('CC_RequestVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int), 'acceleration'),
      (POINTER(c_int), 'maxVelocity')]),
    ('CC_SetVelParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'acceleration'),
      (c_int, 'maxVelocity')]),
    ('CC_MoveAtVelocity', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_short, 'direction')]),
    ('CC_SetDirection', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'reverse')]),
    ('CC_StopImmediate', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_StopProfiled', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetBacklash', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetBacklash', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'distance')]),
    ('CC_GetPositionCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetPositionCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('CC_RequestEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetEncoderCounter', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetEncoderCounter', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'count')]),
    ('CC_GetSoftLimitMode', c_int16, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetLimitsSoftwareApproachPolicy', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_int16, 'limitsSoftwareApproachPolicy')]),
    ('CC_RequestTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int16), 'trigger1Mode'),
      (POINTER(c_int16), 'trigger1Polarity'),
      (POINTER(c_int16), 'trigger2Mode'),
      (POINTER(c_int16), 'trigger2Polarity')]),
    ('CC_SetTriggerConfigParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int16, 'trigger1Mode'),
      (c_int16, 'trigger1Polarity'),
      (c_int16, 'trigger2Mode'),
      (c_int16, 'trigger2Polarity')]),
    ('CC_RequestPosTriggerParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetTriggerParamsParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int32), 'triggerStartPositionFwd'),
      (POINTER(c_int32), 'triggerIntervalFwd'),
      (POINTER(c_int32), 'triggerPulseCountFwd'),
      (POINTER(c_int32), 'triggerStartPositionRev'),
      (POINTER(c_int32), 'triggerIntervalRev'),
      (POINTER(c_int32), 'triggerPulseCountRev'),
      (POINTER(c_int32), 'triggerPulseWidth'),
      (POINTER(c_int32), 'cycleCount')]),
    ('CC_SetTriggerParamsParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int32, 'triggerStartPositionFwd'),
      (c_int32, 'triggerIntervalFwd'),
      (c_int32, 'triggerPulseCountFwd'),
      (c_int32, 'triggerStartPositionRev'),
      (c_int32, 'triggerIntervalRev'),
      (c_int32, 'triggerPulseCountRev'),
      (c_int32, 'triggerPulseWidth'),
      (c_int32, 'cycleCount')]),
    ('CC_GetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerConfig), 'triggerConfigParams')]),
    ('CC_SetTriggerConfigParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerConfig), 'triggerConfigParams')]),
    ('CC_GetTriggerParamsParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerParams), 'triggerParamsParams')]),
    ('CC_SetTriggerParamsParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(KMOT_TriggerParams), 'triggerParamsParams')]),
    ('CC_GetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('CC_SetVelParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_VelocityParameters), 'velocityParams')]),
    ('CC_SetMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'position')]),
    ('CC_RequestMoveAbsolutePosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetMoveAbsolutePosition', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveAbsolute', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_SetMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'distance')]),
    ('CC_RequestMoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetMoveRelativeDistance', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_MoveRelativeDistance', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('CC_SetHomingParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_HomingParameters), 'homingParams')]),
    ('CC_GetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('CC_SetJogParamsBlock', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_JogParameters), 'jogParams')]),
    ('CC_RequestDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_DC_PIDParameters), 'DCproportionalIntegralDifferentialParams')]),
    ('CC_SetDCPIDParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(MOT_DC_PIDParameters), 'DCproportionalIntegralDifferentialParams')]),
    ('CC_SuspendMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_ResumeMoveMessages', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestPosition', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestStatusBits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStatusBits', DWORD, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_StartPolling', c_bool, 'errcheck_true',
     [(c_char_p, 'serialNo'),
      (c_int, 'milliseconds')]),
    ('CC_PollingDuration', c_long, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_StopPolling', None, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_TimeSinceLastMsgReceived', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (POINTER(c_int64), 'lastUpdateTimeMS')]),
    ('CC_EnableLastMsgTimer', None, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_bool, 'enable'),
      (c_int32, 'lastMsgTimeout')]),
    ('CC_HasLastMsgTimerOverrun', c_bool, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_RequestSettings', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStageAxisMinPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_GetStageAxisMaxPos', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetStageAxisLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'minPosition'),
      (c_int, 'maxPosition')]),
    ('CC_SetMotorTravelMode', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'travelMode')]),
    ('CC_GetMotorTravelMode', c_int, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_long, 'stepsPerRev'),
      (c_long, 'gearBoxRatio'),
      (c_float, 'pitch')]),
    ('CC_GetMotorParams', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_long), 'stepsPerRev'),
      (POINTER(c_long), 'gearBoxRatio'),
      (POINTER(c_float), 'pitch')]),
    ('CC_SetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'stepsPerRev'),
      (c_double, 'gearBoxRatio'),
      (c_double, 'pitch')]),
    ('CC_GetMotorParamsExt', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'stepsPerRev'),
      (POINTER(c_double), 'gearBoxRatio'),
      (POINTER(c_double), 'pitch')]),
    ('CC_SetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'maxVelocity'),
      (c_double, 'maxAcceleration')]),
    ('CC_GetMotorVelocityLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'maxVelocity'),
      (POINTER(c_double), 'maxAcceleration')]),
    ('CC_SetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_double, 'minPosition'),
      (c_double, 'maxPosition')]),
    ('CC_GetMotorTravelLimits', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (POINTER(c_double), 'minPosition'),
      (POINTER(c_double), 'maxPosition')]),
    ('CC_GetRealValueFromDeviceUnit', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_int, 'device_unit'),
      (POINTER(c_double), 'real_unit'),
      (c_int, 'unitType')]),
    ('CC_GetDeviceUnitFromRealValue', c_short, 'log_errcheck',
     [(c_char_p, 'serialNo'),
      (c_double, 'real_unit'),
      (POINTER(c_int), 'device_unit'),
      (c_int, 'unitType')]),
    ('CC_RequestDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo')]),
    ('CC_GetDigitalOutputs', c_byte, 'log_errcheck',
     [(c_char_p, 'serialNo')]),
    ('CC_SetDigitalOutputs', c_short, 'errcheck_api',
     [(c_char_p, 'serialNo'),
      (c_byte, 'outputsBits')]),
]


if __name__ == '__main__':
    # The following was used to automatically generate the above...
    import os
    from msl.equipment.resources.utils import CHeader

    struct_imports = []
    root = r'C:\Program Files\Thorlabs\Kinesis'
    fcn_regex = '_API\s+([\w\s]+?)_?_cdecl\s+(\w+)'
    for f in os.listdir(root):
        if f.endswith('.h'):
            path = os.path.join(root, f)
            header = CHeader(path, False)
            fcns = header.functions(fcn_regex)

            for s in header.get_struct_imports():
                if s not in struct_imports:
                    struct_imports.append(s)

            # add an errcheck
            lines = header.get_lines()[::-1]
            for name, values in fcns.items():
                i, n = 0, len(lines)
                while i < n:
                    if '_cdecl' in lines[i] and name in lines[i]:
                        errcheck = None
                        while i < n:
                            line = lines[i]
                            if '<returns>' in line:
                                if 'C_DLL_ERRORCODES_page' in line:
                                    errcheck = 'errcheck_api'
                                elif '<c>true</c> if successful' in line:
                                    errcheck = 'errcheck_true'
                                elif 'True if it succeeds' in line:
                                    errcheck = 'errcheck_true'
                                break
                            if '_cdecl' in line and name not in lines[i]:
                                i -= 1
                                break
                            i += 1
                        if errcheck is None:
                            errcheck = 'log_errcheck'
                        values.append(errcheck)
                        break
                    i += 1

            print(f[23:-2].replace('.', '_') + '_FCNS = [')
            for key, value in fcns.items():
                if key.startswith('TLI_'):
                    continue
                print("    ('{}', {}, '{}',".format(key, value[0], value[2]))
                n = len(value[1]) - 1
                for i, item in enumerate(value[1]):
                    if 'RegisterMessageCallback' in key and item[1] == 'UNKNOWN':
                        item = ('MotionControlCallback', 'functionPointer')
                    if i == 0:
                        if n == 0:
                            print("     [({}, '{}')]),".format(*item))
                        else:
                            print("     [({}, '{}'),".format(*item))
                    elif i == n:
                        print("      ({}, '{}')]),".format(*item))
                    else:
                        print("      ({}, '{}'),".format(*item))
            print(']\n')

    print('from .structs import (')
    for s in sorted(struct_imports):
        print('    {},'.format(s))
    print(')')

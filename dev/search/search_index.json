{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Info</p> <p>The docs are being rewritten. See here for the old docs.</p> <p>The purpose of <code>msl-equipment</code> is to manage information about equipment and to interface with equipment for computer control. The information that is managed is focused on testing and calibration laboratories that are accredited for the ISO/IEC 17025 standard.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2017 - 2025, Measurement Standards Laboratory of New Zealand\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#020-2025-03-28","title":"0.2.0 (2025-03-28)","text":"<p>Added:</p> <ul> <li>support for Python 3.12 and 3.13</li> <li><code>find-equipment</code> console script</li> <li><code>msl.equipment.connection_gpib.ConnectionGPIB</code> class</li> <li><code>msl.equipment.resources.greisinger.gmh3000.GMH3000</code> resource</li> <li><code>msl.equipment.resources.isotech.millik.MilliK</code> resource</li> <li><code>msl.equipment.resources.vaisala.ptu300.PTU300</code> resource</li> <li><code>msl.equipment.resources.vaisala.ptb330.PTB330</code> resource</li> </ul> <p>Fixed:</p> <ul> <li>issue #9 \u2014 Missing functions from Avantes AvaSpec DLL</li> <li>issue #8 \u2014 Invalid URL for LXI XML identification document</li> </ul> <p>Removed:</p> <ul> <li>support for Python 2.7, 3.5, 3.6 and 3.7</li> </ul>"},{"location":"release-notes/#010-2023-06-18","title":"0.1.0 (2023-06-18)","text":"<p>Initial release.</p> <p>It is also the last release to support Python 2.7, 3.5, 3.6 and 3.7</p>"},{"location":"schema/","title":"Schema Classes","text":"<p>Class representations of the XML Schema Definition for an equipment register.</p> <p>The primary class is Equipment which may contain the following classes:</p> <ul> <li>AcceptanceCriteria</li> <li>Accessories</li> <li>Adjustment</li> <li>Alteration</li> <li>Any</li> <li>Competency</li> <li>CompletedTask</li> <li>Conditions</li> <li>DigitalReport</li> <li>Equation</li> <li>File</li> <li>Financial</li> <li>Firmware</li> <li>Maintenance</li> <li>Measurand</li> <li>PlannedTask</li> <li>QualityManual</li> <li>ReferenceMaterials</li> <li>Serialised</li> <li>Specifications</li> <li>SpecifiedRequirements</li> <li>Status</li> </ul>"},{"location":"schema/acceptance_criteria/","title":"AcceptanceCriteria","text":""},{"location":"schema/acceptance_criteria/#msl.equipment.schema.AcceptanceCriteria","title":"AcceptanceCriteria","text":"<pre><code>AcceptanceCriteria(**attributes: str)\n</code></pre> <p>               Bases: <code>Any</code></p> <p>Represents the acceptance criteria in a calibration report.</p> <p>Since this class is currently represented by the any type in the XML Schema Definition, it is simply a subclass of Element. It may be updated to be a more specific class at a later date.</p> <p>Parameters:</p> Name Type Description Default <code>attributes</code> <code>str</code> <p>All keyword arguments are used as the element's attributes.</p> <code>{}</code>"},{"location":"schema/acceptance_criteria/#msl.equipment.schema.AcceptanceCriteria.tag","title":"tag  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag: str = 'acceptanceCriteria'\n</code></pre> <p>The element's name.</p>"},{"location":"schema/acceptance_criteria/#msl.equipment.schema.AcceptanceCriteria.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; A\n</code></pre> <p>Copies an XML element into the Any subclass.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>A</code> <p>The subclass instance.</p>"},{"location":"schema/accessories/","title":"Accessories","text":""},{"location":"schema/accessories/#msl.equipment.schema.Accessories","title":"Accessories","text":"<pre><code>Accessories(**attributes: str)\n</code></pre> <p>               Bases: <code>Any</code></p> <p>Additional accessories that may be required to use the equipment.</p> <p>Since this class is currently represented by the any type in the XML Schema Definition, it is simply a subclass of Element. It may be updated to be a more specific class at a later date.</p> <p>Parameters:</p> Name Type Description Default <code>attributes</code> <code>str</code> <p>All keyword arguments are used as the element's attributes.</p> <code>{}</code>"},{"location":"schema/accessories/#msl.equipment.schema.Accessories.tag","title":"tag  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag: str = 'accessories'\n</code></pre> <p>The element's name.</p>"},{"location":"schema/accessories/#msl.equipment.schema.Accessories.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; A\n</code></pre> <p>Copies an XML element into the Any subclass.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>A</code> <p>The subclass instance.</p>"},{"location":"schema/adjustment/","title":"Adjustment","text":""},{"location":"schema/adjustment/#msl.equipment.schema.Adjustment","title":"Adjustment  <code>dataclass</code>","text":"<pre><code>Adjustment(details: str, date: date)\n</code></pre> <p>An adjustment of the equipment.</p> <p>An example of an adjustment is cleaning the equipment (e.g., a spectral filter) and then performing another calibration measurement.</p> <p>This XML element is found in component.</p> <p>Parameters:</p> Name Type Description Default <code>details</code> <code>str</code> <p>The details of the adjustment that was performed.</p> required <code>date</code> <code>date</code> <p>The date that the adjustment was performed.</p> required"},{"location":"schema/adjustment/#msl.equipment.schema.Adjustment.date","title":"date  <code>instance-attribute</code>","text":"<pre><code>date: date\n</code></pre> <p>The date that the adjustment was performed.</p>"},{"location":"schema/adjustment/#msl.equipment.schema.Adjustment.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details: str\n</code></pre> <p>The details of the adjustment that was performed.</p>"},{"location":"schema/adjustment/#msl.equipment.schema.Adjustment.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Adjustment\n</code></pre> <p>Convert an XML element into a Adjustment instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An <code>&lt;adjustment&gt;</code> XML element from an equipment register (see component).</p> required <p>Returns:</p> Type Description <code>Adjustment</code> <p>The Adjustment instance.</p>"},{"location":"schema/adjustment/#msl.equipment.schema.Adjustment.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Adjustment class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Adjustment as an XML element.</p>"},{"location":"schema/alteration/","title":"Alteration","text":""},{"location":"schema/alteration/#msl.equipment.schema.Alteration","title":"Alteration  <code>dataclass</code>","text":"<pre><code>Alteration(date: date, details: str, performed_by: str)\n</code></pre> <p>Represents the alteration element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>date</code> <code>date</code> <p>The date that the alteration was performed.</p> required <code>details</code> <code>str</code> <p>The details of the alteration.</p> required <code>performed_by</code> <code>str</code> <p>The person or company that performed the alteration.</p> required"},{"location":"schema/alteration/#msl.equipment.schema.Alteration.date","title":"date  <code>instance-attribute</code>","text":"<pre><code>date: date\n</code></pre> <p>The date that the alteration was performed.</p>"},{"location":"schema/alteration/#msl.equipment.schema.Alteration.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details: str\n</code></pre> <p>The details of the alteration.</p>"},{"location":"schema/alteration/#msl.equipment.schema.Alteration.performed_by","title":"performed_by  <code>instance-attribute</code>","text":"<pre><code>performed_by: str\n</code></pre> <p>The person or company that performed the alteration.</p>"},{"location":"schema/alteration/#msl.equipment.schema.Alteration.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Alteration\n</code></pre> <p>Convert an XML element into an Alteration instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An alteration XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>Alteration</code> <p>The Alteration instance.</p>"},{"location":"schema/alteration/#msl.equipment.schema.Alteration.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Alteration class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Alteration as an XML element.</p>"},{"location":"schema/any/","title":"Any","text":""},{"location":"schema/any/#msl.equipment.schema.Any","title":"Any","text":"<pre><code>Any(**attributes: str)\n</code></pre> <p>               Bases: <code>Element</code></p> <p>Base class that represents the any type in the XML Schema Definition.</p> <p>Parameters:</p> Name Type Description Default <code>attributes</code> <code>str</code> <p>All keyword arguments are used as the element's attributes.</p> <code>{}</code>"},{"location":"schema/any/#msl.equipment.schema.Any.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; A\n</code></pre> <p>Copies an XML element into the Any subclass.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>A</code> <p>The subclass instance.</p>"},{"location":"schema/competency/","title":"Competency","text":""},{"location":"schema/competency/#msl.equipment.schema.Competency","title":"Competency  <code>dataclass</code>","text":"<pre><code>Competency(\n    worker: str, checker: str, technical_procedure: str\n)\n</code></pre> <p>Represents the competency element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>str</code> <p>The competent person who executed the technical procedure to accomplish the performance check.</p> required <code>checker</code> <code>str</code> <p>The competent person who reviewed the work done by the <code>worker</code>.</p> required <code>technical_procedure</code> <code>str</code> <p>The technical procedure that was executed to accomplish the performance check.</p> required"},{"location":"schema/competency/#msl.equipment.schema.Competency.checker","title":"checker  <code>instance-attribute</code>","text":"<pre><code>checker: str\n</code></pre> <p>The competent person who reviewed the work done by the <code>worker</code>.</p>"},{"location":"schema/competency/#msl.equipment.schema.Competency.technical_procedure","title":"technical_procedure  <code>instance-attribute</code>","text":"<pre><code>technical_procedure: str\n</code></pre> <p>The technical procedure that was executed to accomplish the performance check.</p>"},{"location":"schema/competency/#msl.equipment.schema.Competency.worker","title":"worker  <code>instance-attribute</code>","text":"<pre><code>worker: str\n</code></pre> <p>The competent person who executed the technical procedure to accomplish the performance check.</p>"},{"location":"schema/competency/#msl.equipment.schema.Competency.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Competency\n</code></pre> <p>Convert an XML element into a Competency instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A competency XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>Competency</code> <p>The Competency instance.</p>"},{"location":"schema/competency/#msl.equipment.schema.Competency.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Competency class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Competency as an XML element.</p>"},{"location":"schema/completed_task/","title":"CompletedTask","text":""},{"location":"schema/completed_task/#msl.equipment.schema.CompletedTask","title":"CompletedTask  <code>dataclass</code>","text":"<pre><code>CompletedTask(\n    task: str,\n    due_date: date,\n    performed_by: str,\n    completed_date: date,\n)\n</code></pre> <p>Represents the completedTask element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>str</code> <p>A description of the task that was completed.</p> required <code>due_date</code> <code>date</code> <p>The date that the maintenance task was due to be completed.</p> required <code>performed_by</code> <code>str</code> <p>The person or company that performed the maintenance task.</p> required <code>completed_date</code> <code>date</code> <p>The date that the maintenance task was completed.</p> required"},{"location":"schema/completed_task/#msl.equipment.schema.CompletedTask.completed_date","title":"completed_date  <code>instance-attribute</code>","text":"<pre><code>completed_date: date\n</code></pre> <p>The date that the maintenance task was completed.</p>"},{"location":"schema/completed_task/#msl.equipment.schema.CompletedTask.due_date","title":"due_date  <code>instance-attribute</code>","text":"<pre><code>due_date: date\n</code></pre> <p>The date that the maintenance task was due to be completed.</p>"},{"location":"schema/completed_task/#msl.equipment.schema.CompletedTask.performed_by","title":"performed_by  <code>instance-attribute</code>","text":"<pre><code>performed_by: str\n</code></pre> <p>The person or company that performed the maintenance task.</p>"},{"location":"schema/completed_task/#msl.equipment.schema.CompletedTask.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task: str\n</code></pre> <p>A description of the task that was completed.</p>"},{"location":"schema/completed_task/#msl.equipment.schema.CompletedTask.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; CompletedTask\n</code></pre> <p>Convert an XML element into a CompletedTask instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A completedTask XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>CompletedTask</code> <p>The CompletedTask instance.</p>"},{"location":"schema/completed_task/#msl.equipment.schema.CompletedTask.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the CompletedTask class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The CompletedTask as an XML element.</p>"},{"location":"schema/conditions/","title":"Conditions","text":""},{"location":"schema/conditions/#msl.equipment.schema.Conditions","title":"Conditions","text":"<pre><code>Conditions(**attributes: str)\n</code></pre> <p>               Bases: <code>Any</code></p> <p>Conditions under which a performance check or calibration report is valid.</p> <p>Since this class is currently represented by the any type in the XML Schema Definition, it is simply a subclass of Element. It may be updated to be a more specific class at a later date.</p> <p>Parameters:</p> Name Type Description Default <code>attributes</code> <code>str</code> <p>All keyword arguments are used as the element's attributes.</p> <code>{}</code>"},{"location":"schema/conditions/#msl.equipment.schema.Conditions.tag","title":"tag  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag: str = 'conditions'\n</code></pre> <p>The element's name.</p>"},{"location":"schema/conditions/#msl.equipment.schema.Conditions.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; A\n</code></pre> <p>Copies an XML element into the Any subclass.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>A</code> <p>The subclass instance.</p>"},{"location":"schema/digital_report/","title":"DigitalReport","text":""},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport","title":"DigitalReport  <code>dataclass</code>","text":"<pre><code>DigitalReport(\n    url: str,\n    format: DigitalFormat,\n    id: str,\n    sha256: str,\n    attributes: dict[str, str] = dict(),\n    comment: str = \"\",\n)\n</code></pre> <p>Represents the digitalReport element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The location of the digital report. The syntax follows RFC 1738 <code>scheme:scheme-specific-part</code>. If <code>scheme:</code> is not specified, it is assumed to be <code>file:</code>.</p> required <code>format</code> <code>DigitalFormat</code> <p>The format of the digital calibration report.</p> required <code>id</code> <code>str</code> <p>The report identification number.</p> required <code>sha256</code> <code>str</code> <p>The SHA-256 checksum of the digital report.</p> required <code>attributes</code> <code>dict[str, str]</code> <p>XML attributes associated with the <code>&lt;url&gt;</code> element.</p> <code>dict()</code> <code>comment</code> <code>str</code> <p>A comment to associate with the digital report.</p> <code>''</code>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes: dict[str, str] = field(default_factory=dict)\n</code></pre> <p>XML attributes associated with the <code>&lt;url&gt;</code> element.</p>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = ''\n</code></pre> <p>A comment associated with the digital report.</p>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport.format","title":"format  <code>instance-attribute</code>","text":"<pre><code>format: DigitalFormat\n</code></pre> <p>The format of the digital calibration report.</p>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre> <p>The report identification number.</p>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport.sha256","title":"sha256  <code>instance-attribute</code>","text":"<pre><code>sha256: str\n</code></pre> <p>The SHA-256 checksum of the digital report.</p>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre> <p>The location of the digital report.</p>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; DigitalReport\n</code></pre> <p>Convert an XML element into a DigitalReport instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A digitalReport XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>DigitalReport</code> <p>The DigitalReport instance.</p>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalReport.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the DigitalReport class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The DigitalReport as an XML element.</p>"},{"location":"schema/digital_report/#msl.equipment.schema.DigitalFormat","title":"DigitalFormat","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the digitalFormatEnumerationString enumeration in an equipment register.</p> <p>Attributes:</p> Name Type Description <code>MSL_PDF</code> <code>str</code> <p><code>\"MSL PDF/A-3\"</code> (MSL's PDF/A-3 format).</p> <code>PTB_DCC</code> <code>str</code> <p><code>\"PTB DCC\"</code> (PTB's Digital Calibration Certificate).</p>"},{"location":"schema/equation/","title":"Equation","text":""},{"location":"schema/equation/#msl.equipment.schema.Equation","title":"Equation  <code>dataclass</code>","text":"<pre><code>Equation(\n    value: Evaluable,\n    uncertainty: Evaluable,\n    unit: str,\n    degree_freedom: float = float(\"inf\"),\n    comment: str = \"\",\n)\n</code></pre> <p>Represents the equation element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Evaluable</code> <p>The equation to evaluate to calculate the corrected value.</p> required <code>uncertainty</code> <code>Evaluable</code> <p>The equation to evaluate to calculate the standard uncertainty.</p> required <code>unit</code> <code>str</code> <p>The unit of the measured quantity.</p> required <code>degree_freedom</code> <code>float</code> <p>The degrees of freedom.</p> <code>float('inf')</code> <code>comment</code> <code>str</code> <p>A comment to associate with the equation.</p> <code>''</code>"},{"location":"schema/equation/#msl.equipment.schema.Equation.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = ''\n</code></pre> <p>A comment associated with the equation.</p>"},{"location":"schema/equation/#msl.equipment.schema.Equation.degree_freedom","title":"degree_freedom  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>degree_freedom: float = float('inf')\n</code></pre> <p>The degrees of freedom.</p>"},{"location":"schema/equation/#msl.equipment.schema.Equation.uncertainty","title":"uncertainty  <code>instance-attribute</code>","text":"<pre><code>uncertainty: Evaluable\n</code></pre> <p>The equation to evaluate to calculate the standard uncertainty.</p>"},{"location":"schema/equation/#msl.equipment.schema.Equation.unit","title":"unit  <code>instance-attribute</code>","text":"<pre><code>unit: str\n</code></pre> <p>The unit of the measured quantity.</p>"},{"location":"schema/equation/#msl.equipment.schema.Equation.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Evaluable\n</code></pre> <p>The equation to evaluate to calculate the corrected value.</p>"},{"location":"schema/equation/#msl.equipment.schema.Equation.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Equation\n</code></pre> <p>Convert an XML element into an Equation instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An equation XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>Equation</code> <p>The Equation instance.</p>"},{"location":"schema/equation/#msl.equipment.schema.Equation.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Equation class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Equation as an XML element.</p>"},{"location":"schema/equation/#msl.equipment.schema.Evaluable","title":"Evaluable  <code>dataclass</code>","text":"<pre><code>Evaluable(\n    equation: str,\n    variables: tuple[str, ...],\n    ranges: dict[str, Range] = dict(),\n)\n</code></pre> <p>Represents the <code>&lt;value&gt;</code> and <code>&lt;uncertainty&gt;</code> XML elements in an equation.</p> <p>Parameters:</p> Name Type Description Default <code>equation</code> <code>str</code> <p>The string representation of the equation to evaluate.</p> required <code>variables</code> <code>tuple[str, ...]</code> <p>The names of the variables in the equation.</p> required <code>ranges</code> <code>dict[str, Range]</code> <p>The numeric range for each variable that the <code>equation</code> is valid for. The keys are the variable names.</p> <code>dict()</code>"},{"location":"schema/equation/#msl.equipment.schema.Evaluable.equation","title":"equation  <code>instance-attribute</code>","text":"<pre><code>equation: str\n</code></pre> <p>The string representation of the equation to evaluate.</p>"},{"location":"schema/equation/#msl.equipment.schema.Evaluable.ranges","title":"ranges  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ranges: dict[str, Range] = field(default_factory=dict)\n</code></pre> <p>The numeric range for each variable that the <code>equation</code> is valid for. The keys are the variable names.</p>"},{"location":"schema/equation/#msl.equipment.schema.Evaluable.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: tuple[str, ...]\n</code></pre> <p>The names of the variables in the equation.</p>"},{"location":"schema/equation/#msl.equipment.schema.Evaluable.__call__","title":"__call__","text":"<pre><code>__call__(\n    *, check_range: bool = True, **data: ArrayLike\n) -&gt; NDArray[float64]\n</code></pre> <p>Evaluate the equation.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ArrayLike</code> <p>A mapping of variable names to value(s) to evaluate the equation with.</p> <code>{}</code> <code>check_range</code> <code>bool</code> <p>Whether to check that the data is within the allowed range(s).</p> <code>True</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>The equation evaluated.</p>"},{"location":"schema/equation/#msl.equipment.schema.Range","title":"Range","text":"<p>               Bases: <code>NamedTuple</code></p> <p>The numeric range for each variable that an equation is valid for.</p> <p>Parameters:</p> Name Type Description <code>minimum</code> <code>float</code> <p>Minimum value in range.</p> <code>maximum</code> <code>float</code> <p>Maximum value in range.</p>"},{"location":"schema/equation/#msl.equipment.schema.Range.maximum","title":"maximum  <code>instance-attribute</code>","text":"<pre><code>maximum: float\n</code></pre> <p>Maximum value in range.</p>"},{"location":"schema/equation/#msl.equipment.schema.Range.minimum","title":"minimum  <code>instance-attribute</code>","text":"<pre><code>minimum: float\n</code></pre> <p>Minimum value in range.</p>"},{"location":"schema/equation/#msl.equipment.schema.Range.check_within_range","title":"check_within_range","text":"<pre><code>check_within_range(value: float | ArrayLike) -&gt; None\n</code></pre> <p>Check that the value(s) is(are) within the range.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float | ArrayLike</code> <p>The value(s) to check.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>value</code> is not within the range.</p>"},{"location":"schema/equipment/","title":"Equipment","text":"<p>Represents the equipment element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>alias</code> <code>str</code> <p>An alternative name to associate with the equipment.</p> <code>''</code> <code>keywords</code> <code>tuple[str, ...]</code> <p>Keywords that describe the equipment.</p> <code>()</code> <code>id</code> <code>str</code> <p>Identity in an equipment register.</p> <code>''</code> <code>manufacturer</code> <code>str</code> <p>Name of manufacturer.</p> <code>''</code> <code>model</code> <code>str</code> <p>Manufacturer's model number (or type identification).</p> <code>''</code> <code>serial</code> <code>str</code> <p>Manufacturer's serial number (or other unique identification).</p> <code>''</code> <code>description</code> <code>str</code> <p>A short description about the equipment.</p> <code>''</code> <code>specifications</code> <code>Specifications</code> <p>Specifications provided by the manufacturer of the equipment.</p> <code>Specifications()</code> <code>location</code> <code>str</code> <p>The usual location (laboratory) that the equipment is found in.</p> <code>''</code> <code>status</code> <code>Status</code> <p>The status of the equipment is an indication of whether the equipment is active (in use) or inactive (not in use).</p> <code>Active</code> <code>loggable</code> <code>bool</code> <p>Whether measurements from the equipment should be logged. Equipment that monitor (for example) pressure, temperature or humidity of a laboratory environment are considered as loggable.</p> <code>False</code> <code>traceable</code> <code>bool</code> <p>Whether the equipment is used for a traceable measurement.</p> <code>False</code> <code>calibrations</code> <code>tuple[Measurand, ...]</code> <p>The calibration history.</p> <code>()</code> <code>maintenance</code> <code>Maintenance</code> <p>The maintenance history and maintenance plan.</p> <code>Maintenance()</code> <code>alterations</code> <code>tuple[Alteration, ...]</code> <p>The alteration history.</p> <code>()</code> <code>firmware</code> <code>tuple[Firmware, ...]</code> <p>The firmware version history.</p> <code>()</code> <code>specified_requirements</code> <code>SpecifiedRequirements</code> <p>Verification that equipment conforms with specified requirements before being placed or returned into service.</p> <code>SpecifiedRequirements()</code> <code>reference_materials</code> <code>ReferenceMaterials</code> <p>Documentation of reference materials, results, acceptance criteria, relevant dates and the period of validity.</p> <code>ReferenceMaterials()</code> <code>quality_manual</code> <code>QualityManual</code> <p>Information that is specified in Section 4.3.6 of the MSL Quality Manual.</p> <code>QualityManual()</code>"},{"location":"schema/file/","title":"File","text":""},{"location":"schema/file/#msl.equipment.schema.File","title":"File  <code>dataclass</code>","text":"<pre><code>File(\n    url: str,\n    sha256: str,\n    attributes: dict[str, str] = dict(),\n    comment: str = \"\",\n)\n</code></pre> <p>Represents the file element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The location of the file. The syntax follows RFC 1738 <code>scheme:scheme-specific-part</code>. If <code>scheme:</code> is not specified, it is assumed to be <code>file:</code>.</p> required <code>sha256</code> <code>str</code> <p>The SHA-256 checksum of the file.</p> required <code>attributes</code> <code>dict[str, str]</code> <p>XML attributes associated with the <code>&lt;url&gt;</code> element.</p> <code>dict()</code> <code>comment</code> <code>str</code> <p>A comment to associate with the file.</p> <code>''</code>"},{"location":"schema/file/#msl.equipment.schema.File.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes: dict[str, str] = field(default_factory=dict)\n</code></pre> <p>XML attributes associated with the <code>&lt;url&gt;</code> element.</p>"},{"location":"schema/file/#msl.equipment.schema.File.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = ''\n</code></pre> <p>A comment associated with the file.</p>"},{"location":"schema/file/#msl.equipment.schema.File.sha256","title":"sha256  <code>instance-attribute</code>","text":"<pre><code>sha256: str\n</code></pre> <p>The SHA-256 checksum of the file.</p>"},{"location":"schema/file/#msl.equipment.schema.File.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre> <p>The location of the file.</p>"},{"location":"schema/file/#msl.equipment.schema.File.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; File\n</code></pre> <p>Convert an XML element into a File instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A file XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>File</code> <p>The File instance.</p>"},{"location":"schema/file/#msl.equipment.schema.File.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the File class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The File as an XML element.</p>"},{"location":"schema/financial/","title":"Financial","text":""},{"location":"schema/financial/#msl.equipment.schema.Financial","title":"Financial  <code>dataclass</code>","text":"<pre><code>Financial(\n    asset_number: str = \"\",\n    warranty_expiration_date: date | None = None,\n    year_purchased: int = 0,\n)\n</code></pre> <p>Represents the financial element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>asset_number</code> <code>str</code> <p>The asset number in the financial system.</p> <code>''</code> <code>warranty_expiration_date</code> <code>date | None</code> <p>Approximate date that the warranty expires.</p> <code>None</code> <code>year_purchased</code> <code>int</code> <p>Approximate year that the equipment was purchased. A value of <code>0</code> represents that the year is unknown.</p> <code>0</code>"},{"location":"schema/financial/#msl.equipment.schema.Financial.asset_number","title":"asset_number  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asset_number: str = ''\n</code></pre> <p>The asset number in the financial system.</p>"},{"location":"schema/financial/#msl.equipment.schema.Financial.warranty_expiration_date","title":"warranty_expiration_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>warranty_expiration_date: date | None = None\n</code></pre> <p>Approximate date that the warranty expires.</p>"},{"location":"schema/financial/#msl.equipment.schema.Financial.year_purchased","title":"year_purchased  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>year_purchased: int = 0\n</code></pre> <p>Approximate year that the equipment was purchased. A value of <code>0</code> represents that the year is unknown.</p>"},{"location":"schema/financial/#msl.equipment.schema.Financial.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Financial\n</code></pre> <p>Convert an XML element into a Financial instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A financial XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>Financial</code> <p>The Financial instance.</p>"},{"location":"schema/financial/#msl.equipment.schema.Financial.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Financial class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Financial as an XML element.</p>"},{"location":"schema/firmware/","title":"Firmware","text":""},{"location":"schema/firmware/#msl.equipment.schema.Firmware","title":"Firmware  <code>dataclass</code>","text":"<pre><code>Firmware(version: str, date: date)\n</code></pre> <p>Represents a firmware <code>&lt;version&gt;</code> sub-element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>Firmware version number.</p> required <code>date</code> <code>date</code> <p>The date that the firmware was initially at or changed to <code>version</code>.</p> required"},{"location":"schema/firmware/#msl.equipment.schema.Firmware.date","title":"date  <code>instance-attribute</code>","text":"<pre><code>date: date\n</code></pre> <p>The date that the firmware was initially at or changed to <code>version</code>.</p>"},{"location":"schema/firmware/#msl.equipment.schema.Firmware.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Firmware version number.</p>"},{"location":"schema/firmware/#msl.equipment.schema.Firmware.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Firmware\n</code></pre> <p>Convert an XML element into a Firmware instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A firmware <code>&lt;version&gt;</code> XML sub-element from an equipment register.</p> required <p>Returns:</p> Type Description <code>Firmware</code> <p>The Firmware instance.</p>"},{"location":"schema/firmware/#msl.equipment.schema.Firmware.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Firmware class into a <code>&lt;version&gt;</code> XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Firmware as a <code>&lt;version&gt;</code> XML element.</p>"},{"location":"schema/maintenance/","title":"Maintenance","text":""},{"location":"schema/maintenance/#msl.equipment.schema.Maintenance","title":"Maintenance  <code>dataclass</code>","text":"<pre><code>Maintenance(\n    planned: tuple[PlannedTask, ...] = (),\n    completed: tuple[CompletedTask, ...] = (),\n)\n</code></pre> <p>Represents the maintenance element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>planned</code> <code>tuple[PlannedTask, ...]</code> <p>Maintenance tasks that are planned to be performed.</p> <code>()</code> <code>completed</code> <code>tuple[CompletedTask, ...]</code> <p>Maintenance tasks that have been completed.</p> <code>()</code>"},{"location":"schema/maintenance/#msl.equipment.schema.Maintenance.completed","title":"completed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>completed: tuple[CompletedTask, ...] = ()\n</code></pre> <p>Maintenance tasks that have been completed.</p>"},{"location":"schema/maintenance/#msl.equipment.schema.Maintenance.planned","title":"planned  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>planned: tuple[PlannedTask, ...] = ()\n</code></pre> <p>Maintenance tasks that are planned to be performed.</p>"},{"location":"schema/maintenance/#msl.equipment.schema.Maintenance.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Maintenance\n</code></pre> <p>Convert an XML element into a Maintenance instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A maintenance XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>Maintenance</code> <p>The Maintenance instance.</p>"},{"location":"schema/maintenance/#msl.equipment.schema.Maintenance.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Maintenance class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Maintenance as an XML element.</p>"},{"location":"schema/measurand/","title":"Measurand","text":"<p>Represents the measurand element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>quantity</code> <code>str</code> <p>The kind of quantity that is measured.</p> required <code>calibration_interval</code> <code>float</code> <p>The number of years that may pass between a calibration or a performance check. For equipment that do not have a required and periodic interval, but are calibrated on demand, use the value <code>0</code>.</p> required <code>components</code> <code>tuple[Component, ...]</code> <p>The components of the equipment that measures the <code>quantity</code>.</p> <code>()</code>"},{"location":"schema/measurand/#msl.equipment.schema.Measurand.calibration_interval","title":"calibration_interval  <code>instance-attribute</code>","text":"<pre><code>calibration_interval: float\n</code></pre> <p>The number of years that may pass between a calibration or a performance check.</p> <p>For equipment that do not have a required and periodic interval, but are calibrated on demand, the value is <code>0</code>.</p>"},{"location":"schema/measurand/#msl.equipment.schema.Measurand.components","title":"components  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>components: tuple[Component, ...] = ()\n</code></pre> <p>The components of the equipment that measures the <code>quantity</code>.</p>"},{"location":"schema/measurand/#msl.equipment.schema.Measurand.quantity","title":"quantity  <code>instance-attribute</code>","text":"<pre><code>quantity: str\n</code></pre> <p>The kind of quantity that is measured.</p>"},{"location":"schema/measurand/#msl.equipment.schema.Measurand.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Measurand\n</code></pre> <p>Convert an XML element into a Measurand instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A measurand XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>Measurand</code> <p>The Measurand instance.</p>"},{"location":"schema/measurand/#msl.equipment.schema.Measurand.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Measurand class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Measurand as an XML element.</p>"},{"location":"schema/planned_task/","title":"PlannedTask","text":""},{"location":"schema/planned_task/#msl.equipment.schema.PlannedTask","title":"PlannedTask  <code>dataclass</code>","text":"<pre><code>PlannedTask(\n    task: str, due_date: date, performed_by: str = \"\"\n)\n</code></pre> <p>Represents the plannedTask element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>str</code> <p>A description of the task that is planned.</p> required <code>due_date</code> <code>date</code> <p>The date that the planned maintenance task is due to be completed.</p> required <code>performed_by</code> <code>str</code> <p>The person or company that will perform the planned maintenance task.</p> <code>''</code>"},{"location":"schema/planned_task/#msl.equipment.schema.PlannedTask.due_date","title":"due_date  <code>instance-attribute</code>","text":"<pre><code>due_date: date\n</code></pre> <p>The date that the planned maintenance task is due to be completed.</p>"},{"location":"schema/planned_task/#msl.equipment.schema.PlannedTask.performed_by","title":"performed_by  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>performed_by: str = ''\n</code></pre> <p>The person or company that will perform the planned maintenance task.</p>"},{"location":"schema/planned_task/#msl.equipment.schema.PlannedTask.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task: str\n</code></pre> <p>A description of the task that is planned.</p>"},{"location":"schema/planned_task/#msl.equipment.schema.PlannedTask.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; PlannedTask\n</code></pre> <p>Convert an XML element into a PlannedTask instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A plannedTask XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>PlannedTask</code> <p>The PlannedTask instance.</p>"},{"location":"schema/planned_task/#msl.equipment.schema.PlannedTask.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the PlannedTask class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The PlannedTask as an XML element.</p>"},{"location":"schema/quality_manual/","title":"QualityManual","text":""},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual","title":"QualityManual  <code>dataclass</code>","text":"<pre><code>QualityManual(\n    accessories: Accessories = Accessories(),\n    documentation: str = \"\",\n    financial: Financial = Financial(),\n    personnel_restrictions: str = \"\",\n    service_agent: str = \"\",\n    technical_procedures: tuple[str, ...] = (),\n)\n</code></pre> <p>Represents the qualityManual element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>accessories</code> <code>Accessories</code> <p>Additional accessories that may be required to use the equipment.</p> <code>Accessories()</code> <code>documentation</code> <code>str</code> <p>Information (such as URLs) about the manuals, datasheets, etc. for the equipment.</p> <code>''</code> <code>financial</code> <code>Financial</code> <p>Financial information about the equipment.</p> <code>Financial()</code> <code>personnel_restrictions</code> <code>str</code> <p>Information about the people (or team) who are qualified to use the equipment.</p> <code>''</code> <code>service_agent</code> <code>str</code> <p>Information about the people or company that are qualified to perform alterations and/or maintenance to the equipment.</p> <code>''</code> <code>technical_procedures</code> <code>tuple[str, ...]</code> <p>The technical procedure(s) that depend on this equipment.</p> <code>()</code>"},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual.accessories","title":"accessories  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>accessories: Accessories = field(\n    default_factory=Accessories\n)\n</code></pre> <p>Additional accessories that may be required to use the equipment.</p>"},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual.documentation","title":"documentation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>documentation: str = ''\n</code></pre> <p>Information (such as URLs) about the manuals, datasheets, etc. for the equipment.</p>"},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual.financial","title":"financial  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>financial: Financial = field(default_factory=Financial)\n</code></pre> <p>Financial information about the equipment.</p>"},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual.personnel_restrictions","title":"personnel_restrictions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>personnel_restrictions: str = ''\n</code></pre> <p>Information about the people (or team) who are qualified to use the equipment.</p>"},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual.service_agent","title":"service_agent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>service_agent: str = ''\n</code></pre> <p>Information about the people or company that are qualified to perform alterations and/or maintenance to the equipment.</p>"},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual.technical_procedures","title":"technical_procedures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>technical_procedures: tuple[str, ...] = ()\n</code></pre> <p>The technical procedure(s) that depend on this equipment.</p>"},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; QualityManual\n</code></pre> <p>Convert an XML element into an QualityManual instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A qualityManual XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>QualityManual</code> <p>The QualityManual instance.</p>"},{"location":"schema/quality_manual/#msl.equipment.schema.QualityManual.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the QualityManual class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The QualityManual as an XML element.</p>"},{"location":"schema/reference_materials/","title":"ReferenceMaterials","text":""},{"location":"schema/reference_materials/#msl.equipment.schema.ReferenceMaterials","title":"ReferenceMaterials","text":"<pre><code>ReferenceMaterials(**attributes: str)\n</code></pre> <p>               Bases: <code>Any</code></p> <p>Documentation of reference materials, results, acceptance criteria, relevant dates and the period of validity.</p> <p>Since this class is currently represented by the any type in the XML Schema Definition, it is simply a subclass of Element. It may be updated to be a more specific class at a later date.</p> <p>Parameters:</p> Name Type Description Default <code>attributes</code> <code>str</code> <p>All keyword arguments are used as the element's attributes.</p> <code>{}</code>"},{"location":"schema/reference_materials/#msl.equipment.schema.ReferenceMaterials.tag","title":"tag  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag: str = 'referenceMaterials'\n</code></pre> <p>The element's name.</p>"},{"location":"schema/reference_materials/#msl.equipment.schema.ReferenceMaterials.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; A\n</code></pre> <p>Copies an XML element into the Any subclass.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>A</code> <p>The subclass instance.</p>"},{"location":"schema/serialised/","title":"Serialised","text":""},{"location":"schema/serialised/#msl.equipment.schema.Serialised","title":"Serialised  <code>dataclass</code>","text":"<pre><code>Serialised(deserialised: Any, comment: str = '')\n</code></pre> <p>Represents the serialised element in an equipment register.</p> <p>Parameters:</p> Name Type Description Default <code>deserialised</code> <code>Any</code> <p>The deserialised object.</p> required <code>comment</code> <code>str</code> <p>A comment to associate with the serialised object.</p> <code>''</code>"},{"location":"schema/serialised/#msl.equipment.schema.Serialised.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = ''\n</code></pre> <p>A comment associated with the serialised object.</p>"},{"location":"schema/serialised/#msl.equipment.schema.Serialised.deserialised","title":"deserialised  <code>instance-attribute</code>","text":"<pre><code>deserialised: Any\n</code></pre> <p>The deserialised object.</p>"},{"location":"schema/serialised/#msl.equipment.schema.Serialised.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; Serialised\n</code></pre> <p>Convert an XML element into a Serialised instance.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>A serialised XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>Serialised</code> <p>The Serialised instance.</p>"},{"location":"schema/serialised/#msl.equipment.schema.Serialised.to_xml","title":"to_xml","text":"<pre><code>to_xml() -&gt; Element[str]\n</code></pre> <p>Convert the Serialised class into an XML element.</p> <p>Returns:</p> Type Description <code>Element[str]</code> <p>The Serialised as an XML element.</p>"},{"location":"schema/specifications/","title":"Specifications","text":""},{"location":"schema/specifications/#msl.equipment.schema.Specifications","title":"Specifications","text":"<pre><code>Specifications(**attributes: str)\n</code></pre> <p>               Bases: <code>Any</code></p> <p>Specifications provided by the manufacturer of the equipment.</p> <p>Typically, the specifications are specified on the website, datasheet and/or technical notes that a manufacturer provides.</p> <p>Since this class is currently represented by the any type in the XML Schema Definition, it is simply a subclass of Element. It may be updated to be a more specific class at a later date.</p> <p>Parameters:</p> Name Type Description Default <code>attributes</code> <code>str</code> <p>All keyword arguments are used as the element's attributes.</p> <code>{}</code>"},{"location":"schema/specifications/#msl.equipment.schema.Specifications.tag","title":"tag  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag: str = 'specifications'\n</code></pre> <p>The element's name.</p>"},{"location":"schema/specifications/#msl.equipment.schema.Specifications.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; A\n</code></pre> <p>Copies an XML element into the Any subclass.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>A</code> <p>The subclass instance.</p>"},{"location":"schema/specified_requirements/","title":"SpecifiedRequirements","text":""},{"location":"schema/specified_requirements/#msl.equipment.schema.SpecifiedRequirements","title":"SpecifiedRequirements","text":"<pre><code>SpecifiedRequirements(**attributes: str)\n</code></pre> <p>               Bases: <code>Any</code></p> <p>Verification that equipment conforms with specified requirements before being placed or returned into service.</p> <p>Since this class is currently represented by the any type in the XML Schema Definition, it is simply a subclass of Element. It may be updated to be a more specific class at a later date.</p> <p>Parameters:</p> Name Type Description Default <code>attributes</code> <code>str</code> <p>All keyword arguments are used as the element's attributes.</p> <code>{}</code>"},{"location":"schema/specified_requirements/#msl.equipment.schema.SpecifiedRequirements.tag","title":"tag  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag: str = 'specifiedRequirements'\n</code></pre> <p>The element's name.</p>"},{"location":"schema/specified_requirements/#msl.equipment.schema.SpecifiedRequirements.from_xml","title":"from_xml  <code>classmethod</code>","text":"<pre><code>from_xml(element: Element[str]) -&gt; A\n</code></pre> <p>Copies an XML element into the Any subclass.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element[str]</code> <p>An XML element from an equipment register.</p> required <p>Returns:</p> Type Description <code>A</code> <p>The subclass instance.</p>"},{"location":"schema/status/","title":"Status","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the status enumeration in an equipment register.</p> <p>Attributes:</p> Name Type Description <code>Active</code> <code>str</code> <p>The equipment is operable and may be used.</p> <code>Damaged</code> <code>str</code> <p>The equipment is damaged and is no longer usable.</p> <code>Disposed</code> <code>str</code> <p>The equipment has been disposed of and is no longer at available (e.g., the equipment was sent to the landfill or to be recycled)</p> <code>Dormant</code> <code>str</code> <p>The equipment is still operable, it is no longer in use but may be used again (e.g., the equipment was replaced with a newer model, and it is kept as a backup)</p> <code>Lost</code> <code>str</code> <p>The equipment is lost, but if found may be put back into service.</p> <code>Retired</code> <code>str</code> <p>The equipment is still operable, but there are no intentions of using it again (e.g., the equipment depends on other equipment that is not available or is no longer manufactured).</p>"}]}